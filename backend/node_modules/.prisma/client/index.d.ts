
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model MemoryRecord
 * 
 */
export type MemoryRecord = $Result.DefaultSelection<Prisma.$MemoryRecordPayload>
/**
 * Model Conversation
 * 
 */
export type Conversation = $Result.DefaultSelection<Prisma.$ConversationPayload>
/**
 * Model ThoughtAnalysis
 * 
 */
export type ThoughtAnalysis = $Result.DefaultSelection<Prisma.$ThoughtAnalysisPayload>
/**
 * Model TimelineAnalysis
 * 
 */
export type TimelineAnalysis = $Result.DefaultSelection<Prisma.$TimelineAnalysisPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.memoryRecord`: Exposes CRUD operations for the **MemoryRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MemoryRecords
    * const memoryRecords = await prisma.memoryRecord.findMany()
    * ```
    */
  get memoryRecord(): Prisma.MemoryRecordDelegate<ExtArgs>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<ExtArgs>;

  /**
   * `prisma.thoughtAnalysis`: Exposes CRUD operations for the **ThoughtAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThoughtAnalyses
    * const thoughtAnalyses = await prisma.thoughtAnalysis.findMany()
    * ```
    */
  get thoughtAnalysis(): Prisma.ThoughtAnalysisDelegate<ExtArgs>;

  /**
   * `prisma.timelineAnalysis`: Exposes CRUD operations for the **TimelineAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimelineAnalyses
    * const timelineAnalyses = await prisma.timelineAnalysis.findMany()
    * ```
    */
  get timelineAnalysis(): Prisma.TimelineAnalysisDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    MemoryRecord: 'MemoryRecord',
    Conversation: 'Conversation',
    ThoughtAnalysis: 'ThoughtAnalysis',
    TimelineAnalysis: 'TimelineAnalysis'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "memoryRecord" | "conversation" | "thoughtAnalysis" | "timelineAnalysis"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      MemoryRecord: {
        payload: Prisma.$MemoryRecordPayload<ExtArgs>
        fields: Prisma.MemoryRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemoryRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemoryRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload>
          }
          findFirst: {
            args: Prisma.MemoryRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemoryRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload>
          }
          findMany: {
            args: Prisma.MemoryRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload>[]
          }
          create: {
            args: Prisma.MemoryRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload>
          }
          createMany: {
            args: Prisma.MemoryRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemoryRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload>[]
          }
          delete: {
            args: Prisma.MemoryRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload>
          }
          update: {
            args: Prisma.MemoryRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload>
          }
          deleteMany: {
            args: Prisma.MemoryRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemoryRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MemoryRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryRecordPayload>
          }
          aggregate: {
            args: Prisma.MemoryRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMemoryRecord>
          }
          groupBy: {
            args: Prisma.MemoryRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemoryRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemoryRecordCountArgs<ExtArgs>
            result: $Utils.Optional<MemoryRecordCountAggregateOutputType> | number
          }
        }
      }
      Conversation: {
        payload: Prisma.$ConversationPayload<ExtArgs>
        fields: Prisma.ConversationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findFirst: {
            args: Prisma.ConversationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findMany: {
            args: Prisma.ConversationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          create: {
            args: Prisma.ConversationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          createMany: {
            args: Prisma.ConversationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConversationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          delete: {
            args: Prisma.ConversationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          update: {
            args: Prisma.ConversationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          deleteMany: {
            args: Prisma.ConversationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConversationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          aggregate: {
            args: Prisma.ConversationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversation>
          }
          groupBy: {
            args: Prisma.ConversationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConversationCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationCountAggregateOutputType> | number
          }
        }
      }
      ThoughtAnalysis: {
        payload: Prisma.$ThoughtAnalysisPayload<ExtArgs>
        fields: Prisma.ThoughtAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThoughtAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThoughtAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload>
          }
          findFirst: {
            args: Prisma.ThoughtAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThoughtAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload>
          }
          findMany: {
            args: Prisma.ThoughtAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload>[]
          }
          create: {
            args: Prisma.ThoughtAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload>
          }
          createMany: {
            args: Prisma.ThoughtAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThoughtAnalysisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload>[]
          }
          delete: {
            args: Prisma.ThoughtAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload>
          }
          update: {
            args: Prisma.ThoughtAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.ThoughtAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThoughtAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ThoughtAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThoughtAnalysisPayload>
          }
          aggregate: {
            args: Prisma.ThoughtAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThoughtAnalysis>
          }
          groupBy: {
            args: Prisma.ThoughtAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThoughtAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThoughtAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<ThoughtAnalysisCountAggregateOutputType> | number
          }
        }
      }
      TimelineAnalysis: {
        payload: Prisma.$TimelineAnalysisPayload<ExtArgs>
        fields: Prisma.TimelineAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimelineAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimelineAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload>
          }
          findFirst: {
            args: Prisma.TimelineAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimelineAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload>
          }
          findMany: {
            args: Prisma.TimelineAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload>[]
          }
          create: {
            args: Prisma.TimelineAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload>
          }
          createMany: {
            args: Prisma.TimelineAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TimelineAnalysisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload>[]
          }
          delete: {
            args: Prisma.TimelineAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload>
          }
          update: {
            args: Prisma.TimelineAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.TimelineAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimelineAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TimelineAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineAnalysisPayload>
          }
          aggregate: {
            args: Prisma.TimelineAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimelineAnalysis>
          }
          groupBy: {
            args: Prisma.TimelineAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimelineAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimelineAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<TimelineAnalysisCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    memoryRecords: number
    conversations: number
    thoughtAnalysis: number
    timelineAnalysis: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    memoryRecords?: boolean | UserCountOutputTypeCountMemoryRecordsArgs
    conversations?: boolean | UserCountOutputTypeCountConversationsArgs
    thoughtAnalysis?: boolean | UserCountOutputTypeCountThoughtAnalysisArgs
    timelineAnalysis?: boolean | UserCountOutputTypeCountTimelineAnalysisArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMemoryRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemoryRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountThoughtAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThoughtAnalysisWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTimelineAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimelineAnalysisWhereInput
  }


  /**
   * Count Type MemoryRecordCountOutputType
   */

  export type MemoryRecordCountOutputType = {
    conversations: number
    timelineAnalysis: number
  }

  export type MemoryRecordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversations?: boolean | MemoryRecordCountOutputTypeCountConversationsArgs
    timelineAnalysis?: boolean | MemoryRecordCountOutputTypeCountTimelineAnalysisArgs
  }

  // Custom InputTypes
  /**
   * MemoryRecordCountOutputType without action
   */
  export type MemoryRecordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecordCountOutputType
     */
    select?: MemoryRecordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MemoryRecordCountOutputType without action
   */
  export type MemoryRecordCountOutputTypeCountConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }

  /**
   * MemoryRecordCountOutputType without action
   */
  export type MemoryRecordCountOutputTypeCountTimelineAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimelineAnalysisWhereInput
  }


  /**
   * Count Type ConversationCountOutputType
   */

  export type ConversationCountOutputType = {
    timelineAnalysis: number
  }

  export type ConversationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timelineAnalysis?: boolean | ConversationCountOutputTypeCountTimelineAnalysisArgs
  }

  // Custom InputTypes
  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationCountOutputType
     */
    select?: ConversationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountTimelineAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimelineAnalysisWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    passwordHash: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    email: string
    passwordHash: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memoryRecords?: boolean | User$memoryRecordsArgs<ExtArgs>
    conversations?: boolean | User$conversationsArgs<ExtArgs>
    thoughtAnalysis?: boolean | User$thoughtAnalysisArgs<ExtArgs>
    timelineAnalysis?: boolean | User$timelineAnalysisArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    memoryRecords?: boolean | User$memoryRecordsArgs<ExtArgs>
    conversations?: boolean | User$conversationsArgs<ExtArgs>
    thoughtAnalysis?: boolean | User$thoughtAnalysisArgs<ExtArgs>
    timelineAnalysis?: boolean | User$timelineAnalysisArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      memoryRecords: Prisma.$MemoryRecordPayload<ExtArgs>[]
      conversations: Prisma.$ConversationPayload<ExtArgs>[]
      thoughtAnalysis: Prisma.$ThoughtAnalysisPayload<ExtArgs>[]
      timelineAnalysis: Prisma.$TimelineAnalysisPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      passwordHash: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    memoryRecords<T extends User$memoryRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$memoryRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "findMany"> | Null>
    conversations<T extends User$conversationsArgs<ExtArgs> = {}>(args?: Subset<T, User$conversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany"> | Null>
    thoughtAnalysis<T extends User$thoughtAnalysisArgs<ExtArgs> = {}>(args?: Subset<T, User$thoughtAnalysisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "findMany"> | Null>
    timelineAnalysis<T extends User$timelineAnalysisArgs<ExtArgs> = {}>(args?: Subset<T, User$timelineAnalysisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.memoryRecords
   */
  export type User$memoryRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    where?: MemoryRecordWhereInput
    orderBy?: MemoryRecordOrderByWithRelationInput | MemoryRecordOrderByWithRelationInput[]
    cursor?: MemoryRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemoryRecordScalarFieldEnum | MemoryRecordScalarFieldEnum[]
  }

  /**
   * User.conversations
   */
  export type User$conversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * User.thoughtAnalysis
   */
  export type User$thoughtAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    where?: ThoughtAnalysisWhereInput
    orderBy?: ThoughtAnalysisOrderByWithRelationInput | ThoughtAnalysisOrderByWithRelationInput[]
    cursor?: ThoughtAnalysisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThoughtAnalysisScalarFieldEnum | ThoughtAnalysisScalarFieldEnum[]
  }

  /**
   * User.timelineAnalysis
   */
  export type User$timelineAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    where?: TimelineAnalysisWhereInput
    orderBy?: TimelineAnalysisOrderByWithRelationInput | TimelineAnalysisOrderByWithRelationInput[]
    cursor?: TimelineAnalysisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimelineAnalysisScalarFieldEnum | TimelineAnalysisScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model MemoryRecord
   */

  export type AggregateMemoryRecord = {
    _count: MemoryRecordCountAggregateOutputType | null
    _avg: MemoryRecordAvgAggregateOutputType | null
    _sum: MemoryRecordSumAggregateOutputType | null
    _min: MemoryRecordMinAggregateOutputType | null
    _max: MemoryRecordMaxAggregateOutputType | null
  }

  export type MemoryRecordAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    mood: number | null
  }

  export type MemoryRecordSumAggregateOutputType = {
    id: number | null
    userId: number | null
    mood: number | null
  }

  export type MemoryRecordMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    content: string | null
    mood: number | null
    tags: string | null
    aiAnalysis: string | null
    createdAt: Date | null
  }

  export type MemoryRecordMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    content: string | null
    mood: number | null
    tags: string | null
    aiAnalysis: string | null
    createdAt: Date | null
  }

  export type MemoryRecordCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    content: number
    mood: number
    tags: number
    aiAnalysis: number
    createdAt: number
    _all: number
  }


  export type MemoryRecordAvgAggregateInputType = {
    id?: true
    userId?: true
    mood?: true
  }

  export type MemoryRecordSumAggregateInputType = {
    id?: true
    userId?: true
    mood?: true
  }

  export type MemoryRecordMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    content?: true
    mood?: true
    tags?: true
    aiAnalysis?: true
    createdAt?: true
  }

  export type MemoryRecordMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    content?: true
    mood?: true
    tags?: true
    aiAnalysis?: true
    createdAt?: true
  }

  export type MemoryRecordCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    content?: true
    mood?: true
    tags?: true
    aiAnalysis?: true
    createdAt?: true
    _all?: true
  }

  export type MemoryRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemoryRecord to aggregate.
     */
    where?: MemoryRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemoryRecords to fetch.
     */
    orderBy?: MemoryRecordOrderByWithRelationInput | MemoryRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemoryRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemoryRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemoryRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MemoryRecords
    **/
    _count?: true | MemoryRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MemoryRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MemoryRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemoryRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemoryRecordMaxAggregateInputType
  }

  export type GetMemoryRecordAggregateType<T extends MemoryRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateMemoryRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMemoryRecord[P]>
      : GetScalarType<T[P], AggregateMemoryRecord[P]>
  }




  export type MemoryRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemoryRecordWhereInput
    orderBy?: MemoryRecordOrderByWithAggregationInput | MemoryRecordOrderByWithAggregationInput[]
    by: MemoryRecordScalarFieldEnum[] | MemoryRecordScalarFieldEnum
    having?: MemoryRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemoryRecordCountAggregateInputType | true
    _avg?: MemoryRecordAvgAggregateInputType
    _sum?: MemoryRecordSumAggregateInputType
    _min?: MemoryRecordMinAggregateInputType
    _max?: MemoryRecordMaxAggregateInputType
  }

  export type MemoryRecordGroupByOutputType = {
    id: number
    userId: number
    title: string | null
    content: string
    mood: number | null
    tags: string | null
    aiAnalysis: string | null
    createdAt: Date
    _count: MemoryRecordCountAggregateOutputType | null
    _avg: MemoryRecordAvgAggregateOutputType | null
    _sum: MemoryRecordSumAggregateOutputType | null
    _min: MemoryRecordMinAggregateOutputType | null
    _max: MemoryRecordMaxAggregateOutputType | null
  }

  type GetMemoryRecordGroupByPayload<T extends MemoryRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemoryRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemoryRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemoryRecordGroupByOutputType[P]>
            : GetScalarType<T[P], MemoryRecordGroupByOutputType[P]>
        }
      >
    >


  export type MemoryRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    mood?: boolean
    tags?: boolean
    aiAnalysis?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    conversations?: boolean | MemoryRecord$conversationsArgs<ExtArgs>
    timelineAnalysis?: boolean | MemoryRecord$timelineAnalysisArgs<ExtArgs>
    _count?: boolean | MemoryRecordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memoryRecord"]>

  export type MemoryRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    mood?: boolean
    tags?: boolean
    aiAnalysis?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memoryRecord"]>

  export type MemoryRecordSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    mood?: boolean
    tags?: boolean
    aiAnalysis?: boolean
    createdAt?: boolean
  }

  export type MemoryRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    conversations?: boolean | MemoryRecord$conversationsArgs<ExtArgs>
    timelineAnalysis?: boolean | MemoryRecord$timelineAnalysisArgs<ExtArgs>
    _count?: boolean | MemoryRecordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MemoryRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MemoryRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MemoryRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      conversations: Prisma.$ConversationPayload<ExtArgs>[]
      timelineAnalysis: Prisma.$TimelineAnalysisPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      title: string | null
      content: string
      mood: number | null
      tags: string | null
      aiAnalysis: string | null
      createdAt: Date
    }, ExtArgs["result"]["memoryRecord"]>
    composites: {}
  }

  type MemoryRecordGetPayload<S extends boolean | null | undefined | MemoryRecordDefaultArgs> = $Result.GetResult<Prisma.$MemoryRecordPayload, S>

  type MemoryRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MemoryRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MemoryRecordCountAggregateInputType | true
    }

  export interface MemoryRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MemoryRecord'], meta: { name: 'MemoryRecord' } }
    /**
     * Find zero or one MemoryRecord that matches the filter.
     * @param {MemoryRecordFindUniqueArgs} args - Arguments to find a MemoryRecord
     * @example
     * // Get one MemoryRecord
     * const memoryRecord = await prisma.memoryRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemoryRecordFindUniqueArgs>(args: SelectSubset<T, MemoryRecordFindUniqueArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MemoryRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MemoryRecordFindUniqueOrThrowArgs} args - Arguments to find a MemoryRecord
     * @example
     * // Get one MemoryRecord
     * const memoryRecord = await prisma.memoryRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemoryRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, MemoryRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MemoryRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryRecordFindFirstArgs} args - Arguments to find a MemoryRecord
     * @example
     * // Get one MemoryRecord
     * const memoryRecord = await prisma.memoryRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemoryRecordFindFirstArgs>(args?: SelectSubset<T, MemoryRecordFindFirstArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MemoryRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryRecordFindFirstOrThrowArgs} args - Arguments to find a MemoryRecord
     * @example
     * // Get one MemoryRecord
     * const memoryRecord = await prisma.memoryRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemoryRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, MemoryRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MemoryRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MemoryRecords
     * const memoryRecords = await prisma.memoryRecord.findMany()
     * 
     * // Get first 10 MemoryRecords
     * const memoryRecords = await prisma.memoryRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memoryRecordWithIdOnly = await prisma.memoryRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemoryRecordFindManyArgs>(args?: SelectSubset<T, MemoryRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MemoryRecord.
     * @param {MemoryRecordCreateArgs} args - Arguments to create a MemoryRecord.
     * @example
     * // Create one MemoryRecord
     * const MemoryRecord = await prisma.memoryRecord.create({
     *   data: {
     *     // ... data to create a MemoryRecord
     *   }
     * })
     * 
     */
    create<T extends MemoryRecordCreateArgs>(args: SelectSubset<T, MemoryRecordCreateArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MemoryRecords.
     * @param {MemoryRecordCreateManyArgs} args - Arguments to create many MemoryRecords.
     * @example
     * // Create many MemoryRecords
     * const memoryRecord = await prisma.memoryRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemoryRecordCreateManyArgs>(args?: SelectSubset<T, MemoryRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MemoryRecords and returns the data saved in the database.
     * @param {MemoryRecordCreateManyAndReturnArgs} args - Arguments to create many MemoryRecords.
     * @example
     * // Create many MemoryRecords
     * const memoryRecord = await prisma.memoryRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MemoryRecords and only return the `id`
     * const memoryRecordWithIdOnly = await prisma.memoryRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemoryRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, MemoryRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MemoryRecord.
     * @param {MemoryRecordDeleteArgs} args - Arguments to delete one MemoryRecord.
     * @example
     * // Delete one MemoryRecord
     * const MemoryRecord = await prisma.memoryRecord.delete({
     *   where: {
     *     // ... filter to delete one MemoryRecord
     *   }
     * })
     * 
     */
    delete<T extends MemoryRecordDeleteArgs>(args: SelectSubset<T, MemoryRecordDeleteArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MemoryRecord.
     * @param {MemoryRecordUpdateArgs} args - Arguments to update one MemoryRecord.
     * @example
     * // Update one MemoryRecord
     * const memoryRecord = await prisma.memoryRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemoryRecordUpdateArgs>(args: SelectSubset<T, MemoryRecordUpdateArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MemoryRecords.
     * @param {MemoryRecordDeleteManyArgs} args - Arguments to filter MemoryRecords to delete.
     * @example
     * // Delete a few MemoryRecords
     * const { count } = await prisma.memoryRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemoryRecordDeleteManyArgs>(args?: SelectSubset<T, MemoryRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MemoryRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MemoryRecords
     * const memoryRecord = await prisma.memoryRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemoryRecordUpdateManyArgs>(args: SelectSubset<T, MemoryRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MemoryRecord.
     * @param {MemoryRecordUpsertArgs} args - Arguments to update or create a MemoryRecord.
     * @example
     * // Update or create a MemoryRecord
     * const memoryRecord = await prisma.memoryRecord.upsert({
     *   create: {
     *     // ... data to create a MemoryRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MemoryRecord we want to update
     *   }
     * })
     */
    upsert<T extends MemoryRecordUpsertArgs>(args: SelectSubset<T, MemoryRecordUpsertArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MemoryRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryRecordCountArgs} args - Arguments to filter MemoryRecords to count.
     * @example
     * // Count the number of MemoryRecords
     * const count = await prisma.memoryRecord.count({
     *   where: {
     *     // ... the filter for the MemoryRecords we want to count
     *   }
     * })
    **/
    count<T extends MemoryRecordCountArgs>(
      args?: Subset<T, MemoryRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemoryRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MemoryRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemoryRecordAggregateArgs>(args: Subset<T, MemoryRecordAggregateArgs>): Prisma.PrismaPromise<GetMemoryRecordAggregateType<T>>

    /**
     * Group by MemoryRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemoryRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemoryRecordGroupByArgs['orderBy'] }
        : { orderBy?: MemoryRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemoryRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemoryRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MemoryRecord model
   */
  readonly fields: MemoryRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MemoryRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemoryRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conversations<T extends MemoryRecord$conversationsArgs<ExtArgs> = {}>(args?: Subset<T, MemoryRecord$conversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany"> | Null>
    timelineAnalysis<T extends MemoryRecord$timelineAnalysisArgs<ExtArgs> = {}>(args?: Subset<T, MemoryRecord$timelineAnalysisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MemoryRecord model
   */ 
  interface MemoryRecordFieldRefs {
    readonly id: FieldRef<"MemoryRecord", 'Int'>
    readonly userId: FieldRef<"MemoryRecord", 'Int'>
    readonly title: FieldRef<"MemoryRecord", 'String'>
    readonly content: FieldRef<"MemoryRecord", 'String'>
    readonly mood: FieldRef<"MemoryRecord", 'Int'>
    readonly tags: FieldRef<"MemoryRecord", 'String'>
    readonly aiAnalysis: FieldRef<"MemoryRecord", 'String'>
    readonly createdAt: FieldRef<"MemoryRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MemoryRecord findUnique
   */
  export type MemoryRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    /**
     * Filter, which MemoryRecord to fetch.
     */
    where: MemoryRecordWhereUniqueInput
  }

  /**
   * MemoryRecord findUniqueOrThrow
   */
  export type MemoryRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    /**
     * Filter, which MemoryRecord to fetch.
     */
    where: MemoryRecordWhereUniqueInput
  }

  /**
   * MemoryRecord findFirst
   */
  export type MemoryRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    /**
     * Filter, which MemoryRecord to fetch.
     */
    where?: MemoryRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemoryRecords to fetch.
     */
    orderBy?: MemoryRecordOrderByWithRelationInput | MemoryRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemoryRecords.
     */
    cursor?: MemoryRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemoryRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemoryRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemoryRecords.
     */
    distinct?: MemoryRecordScalarFieldEnum | MemoryRecordScalarFieldEnum[]
  }

  /**
   * MemoryRecord findFirstOrThrow
   */
  export type MemoryRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    /**
     * Filter, which MemoryRecord to fetch.
     */
    where?: MemoryRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemoryRecords to fetch.
     */
    orderBy?: MemoryRecordOrderByWithRelationInput | MemoryRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemoryRecords.
     */
    cursor?: MemoryRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemoryRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemoryRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemoryRecords.
     */
    distinct?: MemoryRecordScalarFieldEnum | MemoryRecordScalarFieldEnum[]
  }

  /**
   * MemoryRecord findMany
   */
  export type MemoryRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    /**
     * Filter, which MemoryRecords to fetch.
     */
    where?: MemoryRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemoryRecords to fetch.
     */
    orderBy?: MemoryRecordOrderByWithRelationInput | MemoryRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MemoryRecords.
     */
    cursor?: MemoryRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemoryRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemoryRecords.
     */
    skip?: number
    distinct?: MemoryRecordScalarFieldEnum | MemoryRecordScalarFieldEnum[]
  }

  /**
   * MemoryRecord create
   */
  export type MemoryRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a MemoryRecord.
     */
    data: XOR<MemoryRecordCreateInput, MemoryRecordUncheckedCreateInput>
  }

  /**
   * MemoryRecord createMany
   */
  export type MemoryRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MemoryRecords.
     */
    data: MemoryRecordCreateManyInput | MemoryRecordCreateManyInput[]
  }

  /**
   * MemoryRecord createManyAndReturn
   */
  export type MemoryRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MemoryRecords.
     */
    data: MemoryRecordCreateManyInput | MemoryRecordCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MemoryRecord update
   */
  export type MemoryRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a MemoryRecord.
     */
    data: XOR<MemoryRecordUpdateInput, MemoryRecordUncheckedUpdateInput>
    /**
     * Choose, which MemoryRecord to update.
     */
    where: MemoryRecordWhereUniqueInput
  }

  /**
   * MemoryRecord updateMany
   */
  export type MemoryRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MemoryRecords.
     */
    data: XOR<MemoryRecordUpdateManyMutationInput, MemoryRecordUncheckedUpdateManyInput>
    /**
     * Filter which MemoryRecords to update
     */
    where?: MemoryRecordWhereInput
  }

  /**
   * MemoryRecord upsert
   */
  export type MemoryRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the MemoryRecord to update in case it exists.
     */
    where: MemoryRecordWhereUniqueInput
    /**
     * In case the MemoryRecord found by the `where` argument doesn't exist, create a new MemoryRecord with this data.
     */
    create: XOR<MemoryRecordCreateInput, MemoryRecordUncheckedCreateInput>
    /**
     * In case the MemoryRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemoryRecordUpdateInput, MemoryRecordUncheckedUpdateInput>
  }

  /**
   * MemoryRecord delete
   */
  export type MemoryRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
    /**
     * Filter which MemoryRecord to delete.
     */
    where: MemoryRecordWhereUniqueInput
  }

  /**
   * MemoryRecord deleteMany
   */
  export type MemoryRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemoryRecords to delete
     */
    where?: MemoryRecordWhereInput
  }

  /**
   * MemoryRecord.conversations
   */
  export type MemoryRecord$conversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * MemoryRecord.timelineAnalysis
   */
  export type MemoryRecord$timelineAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    where?: TimelineAnalysisWhereInput
    orderBy?: TimelineAnalysisOrderByWithRelationInput | TimelineAnalysisOrderByWithRelationInput[]
    cursor?: TimelineAnalysisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimelineAnalysisScalarFieldEnum | TimelineAnalysisScalarFieldEnum[]
  }

  /**
   * MemoryRecord without action
   */
  export type MemoryRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemoryRecord
     */
    select?: MemoryRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryRecordInclude<ExtArgs> | null
  }


  /**
   * Model Conversation
   */

  export type AggregateConversation = {
    _count: ConversationCountAggregateOutputType | null
    _avg: ConversationAvgAggregateOutputType | null
    _sum: ConversationSumAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  export type ConversationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    memoryRecordId: number | null
  }

  export type ConversationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    memoryRecordId: number | null
  }

  export type ConversationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    memoryRecordId: number | null
    conversationData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    memoryRecordId: number | null
    conversationData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationCountAggregateOutputType = {
    id: number
    userId: number
    memoryRecordId: number
    conversationData: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConversationAvgAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
  }

  export type ConversationSumAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
  }

  export type ConversationMinAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
    conversationData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationMaxAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
    conversationData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationCountAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
    conversationData?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConversationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversation to aggregate.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversations
    **/
    _count?: true | ConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConversationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConversationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMaxAggregateInputType
  }

  export type GetConversationAggregateType<T extends ConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation[P]>
      : GetScalarType<T[P], AggregateConversation[P]>
  }




  export type ConversationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithAggregationInput | ConversationOrderByWithAggregationInput[]
    by: ConversationScalarFieldEnum[] | ConversationScalarFieldEnum
    having?: ConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationCountAggregateInputType | true
    _avg?: ConversationAvgAggregateInputType
    _sum?: ConversationSumAggregateInputType
    _min?: ConversationMinAggregateInputType
    _max?: ConversationMaxAggregateInputType
  }

  export type ConversationGroupByOutputType = {
    id: number
    userId: number
    memoryRecordId: number
    conversationData: string
    createdAt: Date
    updatedAt: Date
    _count: ConversationCountAggregateOutputType | null
    _avg: ConversationAvgAggregateOutputType | null
    _sum: ConversationSumAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  type GetConversationGroupByPayload<T extends ConversationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationGroupByOutputType[P]>
        }
      >
    >


  export type ConversationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    memoryRecordId?: boolean
    conversationData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    memoryRecord?: boolean | MemoryRecordDefaultArgs<ExtArgs>
    timelineAnalysis?: boolean | Conversation$timelineAnalysisArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    memoryRecordId?: boolean
    conversationData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    memoryRecord?: boolean | MemoryRecordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectScalar = {
    id?: boolean
    userId?: boolean
    memoryRecordId?: boolean
    conversationData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConversationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    memoryRecord?: boolean | MemoryRecordDefaultArgs<ExtArgs>
    timelineAnalysis?: boolean | Conversation$timelineAnalysisArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConversationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    memoryRecord?: boolean | MemoryRecordDefaultArgs<ExtArgs>
  }

  export type $ConversationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conversation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      memoryRecord: Prisma.$MemoryRecordPayload<ExtArgs>
      timelineAnalysis: Prisma.$TimelineAnalysisPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      memoryRecordId: number
      conversationData: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["conversation"]>
    composites: {}
  }

  type ConversationGetPayload<S extends boolean | null | undefined | ConversationDefaultArgs> = $Result.GetResult<Prisma.$ConversationPayload, S>

  type ConversationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConversationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConversationCountAggregateInputType | true
    }

  export interface ConversationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conversation'], meta: { name: 'Conversation' } }
    /**
     * Find zero or one Conversation that matches the filter.
     * @param {ConversationFindUniqueArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationFindUniqueArgs>(args: SelectSubset<T, ConversationFindUniqueArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Conversation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConversationFindUniqueOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Conversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationFindFirstArgs>(args?: SelectSubset<T, ConversationFindFirstArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Conversation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversation.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationWithIdOnly = await prisma.conversation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConversationFindManyArgs>(args?: SelectSubset<T, ConversationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Conversation.
     * @param {ConversationCreateArgs} args - Arguments to create a Conversation.
     * @example
     * // Create one Conversation
     * const Conversation = await prisma.conversation.create({
     *   data: {
     *     // ... data to create a Conversation
     *   }
     * })
     * 
     */
    create<T extends ConversationCreateArgs>(args: SelectSubset<T, ConversationCreateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Conversations.
     * @param {ConversationCreateManyArgs} args - Arguments to create many Conversations.
     * @example
     * // Create many Conversations
     * const conversation = await prisma.conversation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationCreateManyArgs>(args?: SelectSubset<T, ConversationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Conversations and returns the data saved in the database.
     * @param {ConversationCreateManyAndReturnArgs} args - Arguments to create many Conversations.
     * @example
     * // Create many Conversations
     * const conversation = await prisma.conversation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Conversations and only return the `id`
     * const conversationWithIdOnly = await prisma.conversation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConversationCreateManyAndReturnArgs>(args?: SelectSubset<T, ConversationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Conversation.
     * @param {ConversationDeleteArgs} args - Arguments to delete one Conversation.
     * @example
     * // Delete one Conversation
     * const Conversation = await prisma.conversation.delete({
     *   where: {
     *     // ... filter to delete one Conversation
     *   }
     * })
     * 
     */
    delete<T extends ConversationDeleteArgs>(args: SelectSubset<T, ConversationDeleteArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Conversation.
     * @param {ConversationUpdateArgs} args - Arguments to update one Conversation.
     * @example
     * // Update one Conversation
     * const conversation = await prisma.conversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationUpdateArgs>(args: SelectSubset<T, ConversationUpdateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Conversations.
     * @param {ConversationDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationDeleteManyArgs>(args?: SelectSubset<T, ConversationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationUpdateManyArgs>(args: SelectSubset<T, ConversationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversation.
     * @param {ConversationUpsertArgs} args - Arguments to update or create a Conversation.
     * @example
     * // Update or create a Conversation
     * const conversation = await prisma.conversation.upsert({
     *   create: {
     *     // ... data to create a Conversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation we want to update
     *   }
     * })
     */
    upsert<T extends ConversationUpsertArgs>(args: SelectSubset<T, ConversationUpsertArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversation.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends ConversationCountArgs>(
      args?: Subset<T, ConversationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationAggregateArgs>(args: Subset<T, ConversationAggregateArgs>): Prisma.PrismaPromise<GetConversationAggregateType<T>>

    /**
     * Group by Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationGroupByArgs['orderBy'] }
        : { orderBy?: ConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conversation model
   */
  readonly fields: ConversationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    memoryRecord<T extends MemoryRecordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemoryRecordDefaultArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    timelineAnalysis<T extends Conversation$timelineAnalysisArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$timelineAnalysisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Conversation model
   */ 
  interface ConversationFieldRefs {
    readonly id: FieldRef<"Conversation", 'Int'>
    readonly userId: FieldRef<"Conversation", 'Int'>
    readonly memoryRecordId: FieldRef<"Conversation", 'Int'>
    readonly conversationData: FieldRef<"Conversation", 'String'>
    readonly createdAt: FieldRef<"Conversation", 'DateTime'>
    readonly updatedAt: FieldRef<"Conversation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Conversation findUnique
   */
  export type ConversationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findUniqueOrThrow
   */
  export type ConversationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findFirst
   */
  export type ConversationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findFirstOrThrow
   */
  export type ConversationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findMany
   */
  export type ConversationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversations to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation create
   */
  export type ConversationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to create a Conversation.
     */
    data: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
  }

  /**
   * Conversation createMany
   */
  export type ConversationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
  }

  /**
   * Conversation createManyAndReturn
   */
  export type ConversationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Conversation update
   */
  export type ConversationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to update a Conversation.
     */
    data: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
    /**
     * Choose, which Conversation to update.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation updateMany
   */
  export type ConversationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conversations.
     */
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    /**
     * Filter which Conversations to update
     */
    where?: ConversationWhereInput
  }

  /**
   * Conversation upsert
   */
  export type ConversationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The filter to search for the Conversation to update in case it exists.
     */
    where: ConversationWhereUniqueInput
    /**
     * In case the Conversation found by the `where` argument doesn't exist, create a new Conversation with this data.
     */
    create: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
    /**
     * In case the Conversation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
  }

  /**
   * Conversation delete
   */
  export type ConversationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter which Conversation to delete.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation deleteMany
   */
  export type ConversationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversations to delete
     */
    where?: ConversationWhereInput
  }

  /**
   * Conversation.timelineAnalysis
   */
  export type Conversation$timelineAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    where?: TimelineAnalysisWhereInput
    orderBy?: TimelineAnalysisOrderByWithRelationInput | TimelineAnalysisOrderByWithRelationInput[]
    cursor?: TimelineAnalysisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimelineAnalysisScalarFieldEnum | TimelineAnalysisScalarFieldEnum[]
  }

  /**
   * Conversation without action
   */
  export type ConversationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
  }


  /**
   * Model ThoughtAnalysis
   */

  export type AggregateThoughtAnalysis = {
    _count: ThoughtAnalysisCountAggregateOutputType | null
    _avg: ThoughtAnalysisAvgAggregateOutputType | null
    _sum: ThoughtAnalysisSumAggregateOutputType | null
    _min: ThoughtAnalysisMinAggregateOutputType | null
    _max: ThoughtAnalysisMaxAggregateOutputType | null
  }

  export type ThoughtAnalysisAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ThoughtAnalysisSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ThoughtAnalysisMinAggregateOutputType = {
    id: number | null
    userId: number | null
    analysisType: string | null
    timeRange: string | null
    analysisResult: string | null
    createdAt: Date | null
  }

  export type ThoughtAnalysisMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    analysisType: string | null
    timeRange: string | null
    analysisResult: string | null
    createdAt: Date | null
  }

  export type ThoughtAnalysisCountAggregateOutputType = {
    id: number
    userId: number
    analysisType: number
    timeRange: number
    analysisResult: number
    createdAt: number
    _all: number
  }


  export type ThoughtAnalysisAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ThoughtAnalysisSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ThoughtAnalysisMinAggregateInputType = {
    id?: true
    userId?: true
    analysisType?: true
    timeRange?: true
    analysisResult?: true
    createdAt?: true
  }

  export type ThoughtAnalysisMaxAggregateInputType = {
    id?: true
    userId?: true
    analysisType?: true
    timeRange?: true
    analysisResult?: true
    createdAt?: true
  }

  export type ThoughtAnalysisCountAggregateInputType = {
    id?: true
    userId?: true
    analysisType?: true
    timeRange?: true
    analysisResult?: true
    createdAt?: true
    _all?: true
  }

  export type ThoughtAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThoughtAnalysis to aggregate.
     */
    where?: ThoughtAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThoughtAnalyses to fetch.
     */
    orderBy?: ThoughtAnalysisOrderByWithRelationInput | ThoughtAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThoughtAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThoughtAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThoughtAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThoughtAnalyses
    **/
    _count?: true | ThoughtAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThoughtAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThoughtAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThoughtAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThoughtAnalysisMaxAggregateInputType
  }

  export type GetThoughtAnalysisAggregateType<T extends ThoughtAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregateThoughtAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThoughtAnalysis[P]>
      : GetScalarType<T[P], AggregateThoughtAnalysis[P]>
  }




  export type ThoughtAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThoughtAnalysisWhereInput
    orderBy?: ThoughtAnalysisOrderByWithAggregationInput | ThoughtAnalysisOrderByWithAggregationInput[]
    by: ThoughtAnalysisScalarFieldEnum[] | ThoughtAnalysisScalarFieldEnum
    having?: ThoughtAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThoughtAnalysisCountAggregateInputType | true
    _avg?: ThoughtAnalysisAvgAggregateInputType
    _sum?: ThoughtAnalysisSumAggregateInputType
    _min?: ThoughtAnalysisMinAggregateInputType
    _max?: ThoughtAnalysisMaxAggregateInputType
  }

  export type ThoughtAnalysisGroupByOutputType = {
    id: number
    userId: number
    analysisType: string
    timeRange: string | null
    analysisResult: string
    createdAt: Date
    _count: ThoughtAnalysisCountAggregateOutputType | null
    _avg: ThoughtAnalysisAvgAggregateOutputType | null
    _sum: ThoughtAnalysisSumAggregateOutputType | null
    _min: ThoughtAnalysisMinAggregateOutputType | null
    _max: ThoughtAnalysisMaxAggregateOutputType | null
  }

  type GetThoughtAnalysisGroupByPayload<T extends ThoughtAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThoughtAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThoughtAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThoughtAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], ThoughtAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type ThoughtAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    analysisType?: boolean
    timeRange?: boolean
    analysisResult?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thoughtAnalysis"]>

  export type ThoughtAnalysisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    analysisType?: boolean
    timeRange?: boolean
    analysisResult?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thoughtAnalysis"]>

  export type ThoughtAnalysisSelectScalar = {
    id?: boolean
    userId?: boolean
    analysisType?: boolean
    timeRange?: boolean
    analysisResult?: boolean
    createdAt?: boolean
  }

  export type ThoughtAnalysisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ThoughtAnalysisIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ThoughtAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThoughtAnalysis"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      analysisType: string
      timeRange: string | null
      analysisResult: string
      createdAt: Date
    }, ExtArgs["result"]["thoughtAnalysis"]>
    composites: {}
  }

  type ThoughtAnalysisGetPayload<S extends boolean | null | undefined | ThoughtAnalysisDefaultArgs> = $Result.GetResult<Prisma.$ThoughtAnalysisPayload, S>

  type ThoughtAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThoughtAnalysisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ThoughtAnalysisCountAggregateInputType | true
    }

  export interface ThoughtAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThoughtAnalysis'], meta: { name: 'ThoughtAnalysis' } }
    /**
     * Find zero or one ThoughtAnalysis that matches the filter.
     * @param {ThoughtAnalysisFindUniqueArgs} args - Arguments to find a ThoughtAnalysis
     * @example
     * // Get one ThoughtAnalysis
     * const thoughtAnalysis = await prisma.thoughtAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThoughtAnalysisFindUniqueArgs>(args: SelectSubset<T, ThoughtAnalysisFindUniqueArgs<ExtArgs>>): Prisma__ThoughtAnalysisClient<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ThoughtAnalysis that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ThoughtAnalysisFindUniqueOrThrowArgs} args - Arguments to find a ThoughtAnalysis
     * @example
     * // Get one ThoughtAnalysis
     * const thoughtAnalysis = await prisma.thoughtAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThoughtAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, ThoughtAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThoughtAnalysisClient<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ThoughtAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThoughtAnalysisFindFirstArgs} args - Arguments to find a ThoughtAnalysis
     * @example
     * // Get one ThoughtAnalysis
     * const thoughtAnalysis = await prisma.thoughtAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThoughtAnalysisFindFirstArgs>(args?: SelectSubset<T, ThoughtAnalysisFindFirstArgs<ExtArgs>>): Prisma__ThoughtAnalysisClient<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ThoughtAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThoughtAnalysisFindFirstOrThrowArgs} args - Arguments to find a ThoughtAnalysis
     * @example
     * // Get one ThoughtAnalysis
     * const thoughtAnalysis = await prisma.thoughtAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThoughtAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, ThoughtAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThoughtAnalysisClient<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ThoughtAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThoughtAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThoughtAnalyses
     * const thoughtAnalyses = await prisma.thoughtAnalysis.findMany()
     * 
     * // Get first 10 ThoughtAnalyses
     * const thoughtAnalyses = await prisma.thoughtAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thoughtAnalysisWithIdOnly = await prisma.thoughtAnalysis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThoughtAnalysisFindManyArgs>(args?: SelectSubset<T, ThoughtAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ThoughtAnalysis.
     * @param {ThoughtAnalysisCreateArgs} args - Arguments to create a ThoughtAnalysis.
     * @example
     * // Create one ThoughtAnalysis
     * const ThoughtAnalysis = await prisma.thoughtAnalysis.create({
     *   data: {
     *     // ... data to create a ThoughtAnalysis
     *   }
     * })
     * 
     */
    create<T extends ThoughtAnalysisCreateArgs>(args: SelectSubset<T, ThoughtAnalysisCreateArgs<ExtArgs>>): Prisma__ThoughtAnalysisClient<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ThoughtAnalyses.
     * @param {ThoughtAnalysisCreateManyArgs} args - Arguments to create many ThoughtAnalyses.
     * @example
     * // Create many ThoughtAnalyses
     * const thoughtAnalysis = await prisma.thoughtAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThoughtAnalysisCreateManyArgs>(args?: SelectSubset<T, ThoughtAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThoughtAnalyses and returns the data saved in the database.
     * @param {ThoughtAnalysisCreateManyAndReturnArgs} args - Arguments to create many ThoughtAnalyses.
     * @example
     * // Create many ThoughtAnalyses
     * const thoughtAnalysis = await prisma.thoughtAnalysis.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThoughtAnalyses and only return the `id`
     * const thoughtAnalysisWithIdOnly = await prisma.thoughtAnalysis.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThoughtAnalysisCreateManyAndReturnArgs>(args?: SelectSubset<T, ThoughtAnalysisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ThoughtAnalysis.
     * @param {ThoughtAnalysisDeleteArgs} args - Arguments to delete one ThoughtAnalysis.
     * @example
     * // Delete one ThoughtAnalysis
     * const ThoughtAnalysis = await prisma.thoughtAnalysis.delete({
     *   where: {
     *     // ... filter to delete one ThoughtAnalysis
     *   }
     * })
     * 
     */
    delete<T extends ThoughtAnalysisDeleteArgs>(args: SelectSubset<T, ThoughtAnalysisDeleteArgs<ExtArgs>>): Prisma__ThoughtAnalysisClient<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ThoughtAnalysis.
     * @param {ThoughtAnalysisUpdateArgs} args - Arguments to update one ThoughtAnalysis.
     * @example
     * // Update one ThoughtAnalysis
     * const thoughtAnalysis = await prisma.thoughtAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThoughtAnalysisUpdateArgs>(args: SelectSubset<T, ThoughtAnalysisUpdateArgs<ExtArgs>>): Prisma__ThoughtAnalysisClient<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ThoughtAnalyses.
     * @param {ThoughtAnalysisDeleteManyArgs} args - Arguments to filter ThoughtAnalyses to delete.
     * @example
     * // Delete a few ThoughtAnalyses
     * const { count } = await prisma.thoughtAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThoughtAnalysisDeleteManyArgs>(args?: SelectSubset<T, ThoughtAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThoughtAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThoughtAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThoughtAnalyses
     * const thoughtAnalysis = await prisma.thoughtAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThoughtAnalysisUpdateManyArgs>(args: SelectSubset<T, ThoughtAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ThoughtAnalysis.
     * @param {ThoughtAnalysisUpsertArgs} args - Arguments to update or create a ThoughtAnalysis.
     * @example
     * // Update or create a ThoughtAnalysis
     * const thoughtAnalysis = await prisma.thoughtAnalysis.upsert({
     *   create: {
     *     // ... data to create a ThoughtAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThoughtAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends ThoughtAnalysisUpsertArgs>(args: SelectSubset<T, ThoughtAnalysisUpsertArgs<ExtArgs>>): Prisma__ThoughtAnalysisClient<$Result.GetResult<Prisma.$ThoughtAnalysisPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ThoughtAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThoughtAnalysisCountArgs} args - Arguments to filter ThoughtAnalyses to count.
     * @example
     * // Count the number of ThoughtAnalyses
     * const count = await prisma.thoughtAnalysis.count({
     *   where: {
     *     // ... the filter for the ThoughtAnalyses we want to count
     *   }
     * })
    **/
    count<T extends ThoughtAnalysisCountArgs>(
      args?: Subset<T, ThoughtAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThoughtAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThoughtAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThoughtAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThoughtAnalysisAggregateArgs>(args: Subset<T, ThoughtAnalysisAggregateArgs>): Prisma.PrismaPromise<GetThoughtAnalysisAggregateType<T>>

    /**
     * Group by ThoughtAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThoughtAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThoughtAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThoughtAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: ThoughtAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThoughtAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThoughtAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThoughtAnalysis model
   */
  readonly fields: ThoughtAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThoughtAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThoughtAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ThoughtAnalysis model
   */ 
  interface ThoughtAnalysisFieldRefs {
    readonly id: FieldRef<"ThoughtAnalysis", 'Int'>
    readonly userId: FieldRef<"ThoughtAnalysis", 'Int'>
    readonly analysisType: FieldRef<"ThoughtAnalysis", 'String'>
    readonly timeRange: FieldRef<"ThoughtAnalysis", 'String'>
    readonly analysisResult: FieldRef<"ThoughtAnalysis", 'String'>
    readonly createdAt: FieldRef<"ThoughtAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ThoughtAnalysis findUnique
   */
  export type ThoughtAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ThoughtAnalysis to fetch.
     */
    where: ThoughtAnalysisWhereUniqueInput
  }

  /**
   * ThoughtAnalysis findUniqueOrThrow
   */
  export type ThoughtAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ThoughtAnalysis to fetch.
     */
    where: ThoughtAnalysisWhereUniqueInput
  }

  /**
   * ThoughtAnalysis findFirst
   */
  export type ThoughtAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ThoughtAnalysis to fetch.
     */
    where?: ThoughtAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThoughtAnalyses to fetch.
     */
    orderBy?: ThoughtAnalysisOrderByWithRelationInput | ThoughtAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThoughtAnalyses.
     */
    cursor?: ThoughtAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThoughtAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThoughtAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThoughtAnalyses.
     */
    distinct?: ThoughtAnalysisScalarFieldEnum | ThoughtAnalysisScalarFieldEnum[]
  }

  /**
   * ThoughtAnalysis findFirstOrThrow
   */
  export type ThoughtAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ThoughtAnalysis to fetch.
     */
    where?: ThoughtAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThoughtAnalyses to fetch.
     */
    orderBy?: ThoughtAnalysisOrderByWithRelationInput | ThoughtAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThoughtAnalyses.
     */
    cursor?: ThoughtAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThoughtAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThoughtAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThoughtAnalyses.
     */
    distinct?: ThoughtAnalysisScalarFieldEnum | ThoughtAnalysisScalarFieldEnum[]
  }

  /**
   * ThoughtAnalysis findMany
   */
  export type ThoughtAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ThoughtAnalyses to fetch.
     */
    where?: ThoughtAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThoughtAnalyses to fetch.
     */
    orderBy?: ThoughtAnalysisOrderByWithRelationInput | ThoughtAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThoughtAnalyses.
     */
    cursor?: ThoughtAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThoughtAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThoughtAnalyses.
     */
    skip?: number
    distinct?: ThoughtAnalysisScalarFieldEnum | ThoughtAnalysisScalarFieldEnum[]
  }

  /**
   * ThoughtAnalysis create
   */
  export type ThoughtAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to create a ThoughtAnalysis.
     */
    data: XOR<ThoughtAnalysisCreateInput, ThoughtAnalysisUncheckedCreateInput>
  }

  /**
   * ThoughtAnalysis createMany
   */
  export type ThoughtAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThoughtAnalyses.
     */
    data: ThoughtAnalysisCreateManyInput | ThoughtAnalysisCreateManyInput[]
  }

  /**
   * ThoughtAnalysis createManyAndReturn
   */
  export type ThoughtAnalysisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ThoughtAnalyses.
     */
    data: ThoughtAnalysisCreateManyInput | ThoughtAnalysisCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThoughtAnalysis update
   */
  export type ThoughtAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to update a ThoughtAnalysis.
     */
    data: XOR<ThoughtAnalysisUpdateInput, ThoughtAnalysisUncheckedUpdateInput>
    /**
     * Choose, which ThoughtAnalysis to update.
     */
    where: ThoughtAnalysisWhereUniqueInput
  }

  /**
   * ThoughtAnalysis updateMany
   */
  export type ThoughtAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThoughtAnalyses.
     */
    data: XOR<ThoughtAnalysisUpdateManyMutationInput, ThoughtAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which ThoughtAnalyses to update
     */
    where?: ThoughtAnalysisWhereInput
  }

  /**
   * ThoughtAnalysis upsert
   */
  export type ThoughtAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    /**
     * The filter to search for the ThoughtAnalysis to update in case it exists.
     */
    where: ThoughtAnalysisWhereUniqueInput
    /**
     * In case the ThoughtAnalysis found by the `where` argument doesn't exist, create a new ThoughtAnalysis with this data.
     */
    create: XOR<ThoughtAnalysisCreateInput, ThoughtAnalysisUncheckedCreateInput>
    /**
     * In case the ThoughtAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThoughtAnalysisUpdateInput, ThoughtAnalysisUncheckedUpdateInput>
  }

  /**
   * ThoughtAnalysis delete
   */
  export type ThoughtAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
    /**
     * Filter which ThoughtAnalysis to delete.
     */
    where: ThoughtAnalysisWhereUniqueInput
  }

  /**
   * ThoughtAnalysis deleteMany
   */
  export type ThoughtAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThoughtAnalyses to delete
     */
    where?: ThoughtAnalysisWhereInput
  }

  /**
   * ThoughtAnalysis without action
   */
  export type ThoughtAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThoughtAnalysis
     */
    select?: ThoughtAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThoughtAnalysisInclude<ExtArgs> | null
  }


  /**
   * Model TimelineAnalysis
   */

  export type AggregateTimelineAnalysis = {
    _count: TimelineAnalysisCountAggregateOutputType | null
    _avg: TimelineAnalysisAvgAggregateOutputType | null
    _sum: TimelineAnalysisSumAggregateOutputType | null
    _min: TimelineAnalysisMinAggregateOutputType | null
    _max: TimelineAnalysisMaxAggregateOutputType | null
  }

  export type TimelineAnalysisAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    memoryRecordId: number | null
    conversationId: number | null
  }

  export type TimelineAnalysisSumAggregateOutputType = {
    id: number | null
    userId: number | null
    memoryRecordId: number | null
    conversationId: number | null
  }

  export type TimelineAnalysisMinAggregateOutputType = {
    id: number | null
    userId: number | null
    memoryRecordId: number | null
    conversationId: number | null
    analysisStage: string | null
    psychologicalInsight: string | null
    emotionalState: string | null
    growthIndicators: string | null
    createdAt: Date | null
  }

  export type TimelineAnalysisMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    memoryRecordId: number | null
    conversationId: number | null
    analysisStage: string | null
    psychologicalInsight: string | null
    emotionalState: string | null
    growthIndicators: string | null
    createdAt: Date | null
  }

  export type TimelineAnalysisCountAggregateOutputType = {
    id: number
    userId: number
    memoryRecordId: number
    conversationId: number
    analysisStage: number
    psychologicalInsight: number
    emotionalState: number
    growthIndicators: number
    createdAt: number
    _all: number
  }


  export type TimelineAnalysisAvgAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
    conversationId?: true
  }

  export type TimelineAnalysisSumAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
    conversationId?: true
  }

  export type TimelineAnalysisMinAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
    conversationId?: true
    analysisStage?: true
    psychologicalInsight?: true
    emotionalState?: true
    growthIndicators?: true
    createdAt?: true
  }

  export type TimelineAnalysisMaxAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
    conversationId?: true
    analysisStage?: true
    psychologicalInsight?: true
    emotionalState?: true
    growthIndicators?: true
    createdAt?: true
  }

  export type TimelineAnalysisCountAggregateInputType = {
    id?: true
    userId?: true
    memoryRecordId?: true
    conversationId?: true
    analysisStage?: true
    psychologicalInsight?: true
    emotionalState?: true
    growthIndicators?: true
    createdAt?: true
    _all?: true
  }

  export type TimelineAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimelineAnalysis to aggregate.
     */
    where?: TimelineAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimelineAnalyses to fetch.
     */
    orderBy?: TimelineAnalysisOrderByWithRelationInput | TimelineAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimelineAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimelineAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimelineAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimelineAnalyses
    **/
    _count?: true | TimelineAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimelineAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimelineAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimelineAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimelineAnalysisMaxAggregateInputType
  }

  export type GetTimelineAnalysisAggregateType<T extends TimelineAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregateTimelineAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimelineAnalysis[P]>
      : GetScalarType<T[P], AggregateTimelineAnalysis[P]>
  }




  export type TimelineAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimelineAnalysisWhereInput
    orderBy?: TimelineAnalysisOrderByWithAggregationInput | TimelineAnalysisOrderByWithAggregationInput[]
    by: TimelineAnalysisScalarFieldEnum[] | TimelineAnalysisScalarFieldEnum
    having?: TimelineAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimelineAnalysisCountAggregateInputType | true
    _avg?: TimelineAnalysisAvgAggregateInputType
    _sum?: TimelineAnalysisSumAggregateInputType
    _min?: TimelineAnalysisMinAggregateInputType
    _max?: TimelineAnalysisMaxAggregateInputType
  }

  export type TimelineAnalysisGroupByOutputType = {
    id: number
    userId: number
    memoryRecordId: number
    conversationId: number | null
    analysisStage: string
    psychologicalInsight: string
    emotionalState: string | null
    growthIndicators: string | null
    createdAt: Date
    _count: TimelineAnalysisCountAggregateOutputType | null
    _avg: TimelineAnalysisAvgAggregateOutputType | null
    _sum: TimelineAnalysisSumAggregateOutputType | null
    _min: TimelineAnalysisMinAggregateOutputType | null
    _max: TimelineAnalysisMaxAggregateOutputType | null
  }

  type GetTimelineAnalysisGroupByPayload<T extends TimelineAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimelineAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimelineAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimelineAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], TimelineAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type TimelineAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    memoryRecordId?: boolean
    conversationId?: boolean
    analysisStage?: boolean
    psychologicalInsight?: boolean
    emotionalState?: boolean
    growthIndicators?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    memoryRecord?: boolean | MemoryRecordDefaultArgs<ExtArgs>
    conversation?: boolean | TimelineAnalysis$conversationArgs<ExtArgs>
  }, ExtArgs["result"]["timelineAnalysis"]>

  export type TimelineAnalysisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    memoryRecordId?: boolean
    conversationId?: boolean
    analysisStage?: boolean
    psychologicalInsight?: boolean
    emotionalState?: boolean
    growthIndicators?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    memoryRecord?: boolean | MemoryRecordDefaultArgs<ExtArgs>
    conversation?: boolean | TimelineAnalysis$conversationArgs<ExtArgs>
  }, ExtArgs["result"]["timelineAnalysis"]>

  export type TimelineAnalysisSelectScalar = {
    id?: boolean
    userId?: boolean
    memoryRecordId?: boolean
    conversationId?: boolean
    analysisStage?: boolean
    psychologicalInsight?: boolean
    emotionalState?: boolean
    growthIndicators?: boolean
    createdAt?: boolean
  }

  export type TimelineAnalysisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    memoryRecord?: boolean | MemoryRecordDefaultArgs<ExtArgs>
    conversation?: boolean | TimelineAnalysis$conversationArgs<ExtArgs>
  }
  export type TimelineAnalysisIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    memoryRecord?: boolean | MemoryRecordDefaultArgs<ExtArgs>
    conversation?: boolean | TimelineAnalysis$conversationArgs<ExtArgs>
  }

  export type $TimelineAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TimelineAnalysis"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      memoryRecord: Prisma.$MemoryRecordPayload<ExtArgs>
      conversation: Prisma.$ConversationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      memoryRecordId: number
      conversationId: number | null
      analysisStage: string
      psychologicalInsight: string
      emotionalState: string | null
      growthIndicators: string | null
      createdAt: Date
    }, ExtArgs["result"]["timelineAnalysis"]>
    composites: {}
  }

  type TimelineAnalysisGetPayload<S extends boolean | null | undefined | TimelineAnalysisDefaultArgs> = $Result.GetResult<Prisma.$TimelineAnalysisPayload, S>

  type TimelineAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TimelineAnalysisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TimelineAnalysisCountAggregateInputType | true
    }

  export interface TimelineAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimelineAnalysis'], meta: { name: 'TimelineAnalysis' } }
    /**
     * Find zero or one TimelineAnalysis that matches the filter.
     * @param {TimelineAnalysisFindUniqueArgs} args - Arguments to find a TimelineAnalysis
     * @example
     * // Get one TimelineAnalysis
     * const timelineAnalysis = await prisma.timelineAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimelineAnalysisFindUniqueArgs>(args: SelectSubset<T, TimelineAnalysisFindUniqueArgs<ExtArgs>>): Prisma__TimelineAnalysisClient<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TimelineAnalysis that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TimelineAnalysisFindUniqueOrThrowArgs} args - Arguments to find a TimelineAnalysis
     * @example
     * // Get one TimelineAnalysis
     * const timelineAnalysis = await prisma.timelineAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimelineAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, TimelineAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimelineAnalysisClient<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TimelineAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineAnalysisFindFirstArgs} args - Arguments to find a TimelineAnalysis
     * @example
     * // Get one TimelineAnalysis
     * const timelineAnalysis = await prisma.timelineAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimelineAnalysisFindFirstArgs>(args?: SelectSubset<T, TimelineAnalysisFindFirstArgs<ExtArgs>>): Prisma__TimelineAnalysisClient<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TimelineAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineAnalysisFindFirstOrThrowArgs} args - Arguments to find a TimelineAnalysis
     * @example
     * // Get one TimelineAnalysis
     * const timelineAnalysis = await prisma.timelineAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimelineAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, TimelineAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimelineAnalysisClient<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TimelineAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimelineAnalyses
     * const timelineAnalyses = await prisma.timelineAnalysis.findMany()
     * 
     * // Get first 10 TimelineAnalyses
     * const timelineAnalyses = await prisma.timelineAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timelineAnalysisWithIdOnly = await prisma.timelineAnalysis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimelineAnalysisFindManyArgs>(args?: SelectSubset<T, TimelineAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TimelineAnalysis.
     * @param {TimelineAnalysisCreateArgs} args - Arguments to create a TimelineAnalysis.
     * @example
     * // Create one TimelineAnalysis
     * const TimelineAnalysis = await prisma.timelineAnalysis.create({
     *   data: {
     *     // ... data to create a TimelineAnalysis
     *   }
     * })
     * 
     */
    create<T extends TimelineAnalysisCreateArgs>(args: SelectSubset<T, TimelineAnalysisCreateArgs<ExtArgs>>): Prisma__TimelineAnalysisClient<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TimelineAnalyses.
     * @param {TimelineAnalysisCreateManyArgs} args - Arguments to create many TimelineAnalyses.
     * @example
     * // Create many TimelineAnalyses
     * const timelineAnalysis = await prisma.timelineAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimelineAnalysisCreateManyArgs>(args?: SelectSubset<T, TimelineAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TimelineAnalyses and returns the data saved in the database.
     * @param {TimelineAnalysisCreateManyAndReturnArgs} args - Arguments to create many TimelineAnalyses.
     * @example
     * // Create many TimelineAnalyses
     * const timelineAnalysis = await prisma.timelineAnalysis.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TimelineAnalyses and only return the `id`
     * const timelineAnalysisWithIdOnly = await prisma.timelineAnalysis.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TimelineAnalysisCreateManyAndReturnArgs>(args?: SelectSubset<T, TimelineAnalysisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TimelineAnalysis.
     * @param {TimelineAnalysisDeleteArgs} args - Arguments to delete one TimelineAnalysis.
     * @example
     * // Delete one TimelineAnalysis
     * const TimelineAnalysis = await prisma.timelineAnalysis.delete({
     *   where: {
     *     // ... filter to delete one TimelineAnalysis
     *   }
     * })
     * 
     */
    delete<T extends TimelineAnalysisDeleteArgs>(args: SelectSubset<T, TimelineAnalysisDeleteArgs<ExtArgs>>): Prisma__TimelineAnalysisClient<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TimelineAnalysis.
     * @param {TimelineAnalysisUpdateArgs} args - Arguments to update one TimelineAnalysis.
     * @example
     * // Update one TimelineAnalysis
     * const timelineAnalysis = await prisma.timelineAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimelineAnalysisUpdateArgs>(args: SelectSubset<T, TimelineAnalysisUpdateArgs<ExtArgs>>): Prisma__TimelineAnalysisClient<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TimelineAnalyses.
     * @param {TimelineAnalysisDeleteManyArgs} args - Arguments to filter TimelineAnalyses to delete.
     * @example
     * // Delete a few TimelineAnalyses
     * const { count } = await prisma.timelineAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimelineAnalysisDeleteManyArgs>(args?: SelectSubset<T, TimelineAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimelineAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimelineAnalyses
     * const timelineAnalysis = await prisma.timelineAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimelineAnalysisUpdateManyArgs>(args: SelectSubset<T, TimelineAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TimelineAnalysis.
     * @param {TimelineAnalysisUpsertArgs} args - Arguments to update or create a TimelineAnalysis.
     * @example
     * // Update or create a TimelineAnalysis
     * const timelineAnalysis = await prisma.timelineAnalysis.upsert({
     *   create: {
     *     // ... data to create a TimelineAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimelineAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends TimelineAnalysisUpsertArgs>(args: SelectSubset<T, TimelineAnalysisUpsertArgs<ExtArgs>>): Prisma__TimelineAnalysisClient<$Result.GetResult<Prisma.$TimelineAnalysisPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TimelineAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineAnalysisCountArgs} args - Arguments to filter TimelineAnalyses to count.
     * @example
     * // Count the number of TimelineAnalyses
     * const count = await prisma.timelineAnalysis.count({
     *   where: {
     *     // ... the filter for the TimelineAnalyses we want to count
     *   }
     * })
    **/
    count<T extends TimelineAnalysisCountArgs>(
      args?: Subset<T, TimelineAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimelineAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimelineAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimelineAnalysisAggregateArgs>(args: Subset<T, TimelineAnalysisAggregateArgs>): Prisma.PrismaPromise<GetTimelineAnalysisAggregateType<T>>

    /**
     * Group by TimelineAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimelineAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimelineAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: TimelineAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimelineAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimelineAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TimelineAnalysis model
   */
  readonly fields: TimelineAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimelineAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimelineAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    memoryRecord<T extends MemoryRecordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemoryRecordDefaultArgs<ExtArgs>>): Prisma__MemoryRecordClient<$Result.GetResult<Prisma.$MemoryRecordPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conversation<T extends TimelineAnalysis$conversationArgs<ExtArgs> = {}>(args?: Subset<T, TimelineAnalysis$conversationArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TimelineAnalysis model
   */ 
  interface TimelineAnalysisFieldRefs {
    readonly id: FieldRef<"TimelineAnalysis", 'Int'>
    readonly userId: FieldRef<"TimelineAnalysis", 'Int'>
    readonly memoryRecordId: FieldRef<"TimelineAnalysis", 'Int'>
    readonly conversationId: FieldRef<"TimelineAnalysis", 'Int'>
    readonly analysisStage: FieldRef<"TimelineAnalysis", 'String'>
    readonly psychologicalInsight: FieldRef<"TimelineAnalysis", 'String'>
    readonly emotionalState: FieldRef<"TimelineAnalysis", 'String'>
    readonly growthIndicators: FieldRef<"TimelineAnalysis", 'String'>
    readonly createdAt: FieldRef<"TimelineAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TimelineAnalysis findUnique
   */
  export type TimelineAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which TimelineAnalysis to fetch.
     */
    where: TimelineAnalysisWhereUniqueInput
  }

  /**
   * TimelineAnalysis findUniqueOrThrow
   */
  export type TimelineAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which TimelineAnalysis to fetch.
     */
    where: TimelineAnalysisWhereUniqueInput
  }

  /**
   * TimelineAnalysis findFirst
   */
  export type TimelineAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which TimelineAnalysis to fetch.
     */
    where?: TimelineAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimelineAnalyses to fetch.
     */
    orderBy?: TimelineAnalysisOrderByWithRelationInput | TimelineAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimelineAnalyses.
     */
    cursor?: TimelineAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimelineAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimelineAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimelineAnalyses.
     */
    distinct?: TimelineAnalysisScalarFieldEnum | TimelineAnalysisScalarFieldEnum[]
  }

  /**
   * TimelineAnalysis findFirstOrThrow
   */
  export type TimelineAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which TimelineAnalysis to fetch.
     */
    where?: TimelineAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimelineAnalyses to fetch.
     */
    orderBy?: TimelineAnalysisOrderByWithRelationInput | TimelineAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimelineAnalyses.
     */
    cursor?: TimelineAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimelineAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimelineAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimelineAnalyses.
     */
    distinct?: TimelineAnalysisScalarFieldEnum | TimelineAnalysisScalarFieldEnum[]
  }

  /**
   * TimelineAnalysis findMany
   */
  export type TimelineAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which TimelineAnalyses to fetch.
     */
    where?: TimelineAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimelineAnalyses to fetch.
     */
    orderBy?: TimelineAnalysisOrderByWithRelationInput | TimelineAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimelineAnalyses.
     */
    cursor?: TimelineAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimelineAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimelineAnalyses.
     */
    skip?: number
    distinct?: TimelineAnalysisScalarFieldEnum | TimelineAnalysisScalarFieldEnum[]
  }

  /**
   * TimelineAnalysis create
   */
  export type TimelineAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to create a TimelineAnalysis.
     */
    data: XOR<TimelineAnalysisCreateInput, TimelineAnalysisUncheckedCreateInput>
  }

  /**
   * TimelineAnalysis createMany
   */
  export type TimelineAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TimelineAnalyses.
     */
    data: TimelineAnalysisCreateManyInput | TimelineAnalysisCreateManyInput[]
  }

  /**
   * TimelineAnalysis createManyAndReturn
   */
  export type TimelineAnalysisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TimelineAnalyses.
     */
    data: TimelineAnalysisCreateManyInput | TimelineAnalysisCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimelineAnalysis update
   */
  export type TimelineAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to update a TimelineAnalysis.
     */
    data: XOR<TimelineAnalysisUpdateInput, TimelineAnalysisUncheckedUpdateInput>
    /**
     * Choose, which TimelineAnalysis to update.
     */
    where: TimelineAnalysisWhereUniqueInput
  }

  /**
   * TimelineAnalysis updateMany
   */
  export type TimelineAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TimelineAnalyses.
     */
    data: XOR<TimelineAnalysisUpdateManyMutationInput, TimelineAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which TimelineAnalyses to update
     */
    where?: TimelineAnalysisWhereInput
  }

  /**
   * TimelineAnalysis upsert
   */
  export type TimelineAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    /**
     * The filter to search for the TimelineAnalysis to update in case it exists.
     */
    where: TimelineAnalysisWhereUniqueInput
    /**
     * In case the TimelineAnalysis found by the `where` argument doesn't exist, create a new TimelineAnalysis with this data.
     */
    create: XOR<TimelineAnalysisCreateInput, TimelineAnalysisUncheckedCreateInput>
    /**
     * In case the TimelineAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimelineAnalysisUpdateInput, TimelineAnalysisUncheckedUpdateInput>
  }

  /**
   * TimelineAnalysis delete
   */
  export type TimelineAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
    /**
     * Filter which TimelineAnalysis to delete.
     */
    where: TimelineAnalysisWhereUniqueInput
  }

  /**
   * TimelineAnalysis deleteMany
   */
  export type TimelineAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimelineAnalyses to delete
     */
    where?: TimelineAnalysisWhereInput
  }

  /**
   * TimelineAnalysis.conversation
   */
  export type TimelineAnalysis$conversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
  }

  /**
   * TimelineAnalysis without action
   */
  export type TimelineAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineAnalysis
     */
    select?: TimelineAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineAnalysisInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    passwordHash: 'passwordHash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MemoryRecordScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    content: 'content',
    mood: 'mood',
    tags: 'tags',
    aiAnalysis: 'aiAnalysis',
    createdAt: 'createdAt'
  };

  export type MemoryRecordScalarFieldEnum = (typeof MemoryRecordScalarFieldEnum)[keyof typeof MemoryRecordScalarFieldEnum]


  export const ConversationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    memoryRecordId: 'memoryRecordId',
    conversationData: 'conversationData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


  export const ThoughtAnalysisScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    analysisType: 'analysisType',
    timeRange: 'timeRange',
    analysisResult: 'analysisResult',
    createdAt: 'createdAt'
  };

  export type ThoughtAnalysisScalarFieldEnum = (typeof ThoughtAnalysisScalarFieldEnum)[keyof typeof ThoughtAnalysisScalarFieldEnum]


  export const TimelineAnalysisScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    memoryRecordId: 'memoryRecordId',
    conversationId: 'conversationId',
    analysisStage: 'analysisStage',
    psychologicalInsight: 'psychologicalInsight',
    emotionalState: 'emotionalState',
    growthIndicators: 'growthIndicators',
    createdAt: 'createdAt'
  };

  export type TimelineAnalysisScalarFieldEnum = (typeof TimelineAnalysisScalarFieldEnum)[keyof typeof TimelineAnalysisScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    memoryRecords?: MemoryRecordListRelationFilter
    conversations?: ConversationListRelationFilter
    thoughtAnalysis?: ThoughtAnalysisListRelationFilter
    timelineAnalysis?: TimelineAnalysisListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memoryRecords?: MemoryRecordOrderByRelationAggregateInput
    conversations?: ConversationOrderByRelationAggregateInput
    thoughtAnalysis?: ThoughtAnalysisOrderByRelationAggregateInput
    timelineAnalysis?: TimelineAnalysisOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    memoryRecords?: MemoryRecordListRelationFilter
    conversations?: ConversationListRelationFilter
    thoughtAnalysis?: ThoughtAnalysisListRelationFilter
    timelineAnalysis?: TimelineAnalysisListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MemoryRecordWhereInput = {
    AND?: MemoryRecordWhereInput | MemoryRecordWhereInput[]
    OR?: MemoryRecordWhereInput[]
    NOT?: MemoryRecordWhereInput | MemoryRecordWhereInput[]
    id?: IntFilter<"MemoryRecord"> | number
    userId?: IntFilter<"MemoryRecord"> | number
    title?: StringNullableFilter<"MemoryRecord"> | string | null
    content?: StringFilter<"MemoryRecord"> | string
    mood?: IntNullableFilter<"MemoryRecord"> | number | null
    tags?: StringNullableFilter<"MemoryRecord"> | string | null
    aiAnalysis?: StringNullableFilter<"MemoryRecord"> | string | null
    createdAt?: DateTimeFilter<"MemoryRecord"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    conversations?: ConversationListRelationFilter
    timelineAnalysis?: TimelineAnalysisListRelationFilter
  }

  export type MemoryRecordOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrderInput | SortOrder
    content?: SortOrder
    mood?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    conversations?: ConversationOrderByRelationAggregateInput
    timelineAnalysis?: TimelineAnalysisOrderByRelationAggregateInput
  }

  export type MemoryRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MemoryRecordWhereInput | MemoryRecordWhereInput[]
    OR?: MemoryRecordWhereInput[]
    NOT?: MemoryRecordWhereInput | MemoryRecordWhereInput[]
    userId?: IntFilter<"MemoryRecord"> | number
    title?: StringNullableFilter<"MemoryRecord"> | string | null
    content?: StringFilter<"MemoryRecord"> | string
    mood?: IntNullableFilter<"MemoryRecord"> | number | null
    tags?: StringNullableFilter<"MemoryRecord"> | string | null
    aiAnalysis?: StringNullableFilter<"MemoryRecord"> | string | null
    createdAt?: DateTimeFilter<"MemoryRecord"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    conversations?: ConversationListRelationFilter
    timelineAnalysis?: TimelineAnalysisListRelationFilter
  }, "id">

  export type MemoryRecordOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrderInput | SortOrder
    content?: SortOrder
    mood?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MemoryRecordCountOrderByAggregateInput
    _avg?: MemoryRecordAvgOrderByAggregateInput
    _max?: MemoryRecordMaxOrderByAggregateInput
    _min?: MemoryRecordMinOrderByAggregateInput
    _sum?: MemoryRecordSumOrderByAggregateInput
  }

  export type MemoryRecordScalarWhereWithAggregatesInput = {
    AND?: MemoryRecordScalarWhereWithAggregatesInput | MemoryRecordScalarWhereWithAggregatesInput[]
    OR?: MemoryRecordScalarWhereWithAggregatesInput[]
    NOT?: MemoryRecordScalarWhereWithAggregatesInput | MemoryRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MemoryRecord"> | number
    userId?: IntWithAggregatesFilter<"MemoryRecord"> | number
    title?: StringNullableWithAggregatesFilter<"MemoryRecord"> | string | null
    content?: StringWithAggregatesFilter<"MemoryRecord"> | string
    mood?: IntNullableWithAggregatesFilter<"MemoryRecord"> | number | null
    tags?: StringNullableWithAggregatesFilter<"MemoryRecord"> | string | null
    aiAnalysis?: StringNullableWithAggregatesFilter<"MemoryRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MemoryRecord"> | Date | string
  }

  export type ConversationWhereInput = {
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    id?: IntFilter<"Conversation"> | number
    userId?: IntFilter<"Conversation"> | number
    memoryRecordId?: IntFilter<"Conversation"> | number
    conversationData?: StringFilter<"Conversation"> | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeFilter<"Conversation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    memoryRecord?: XOR<MemoryRecordRelationFilter, MemoryRecordWhereInput>
    timelineAnalysis?: TimelineAnalysisListRelationFilter
  }

  export type ConversationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    memoryRecord?: MemoryRecordOrderByWithRelationInput
    timelineAnalysis?: TimelineAnalysisOrderByRelationAggregateInput
  }

  export type ConversationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    userId?: IntFilter<"Conversation"> | number
    memoryRecordId?: IntFilter<"Conversation"> | number
    conversationData?: StringFilter<"Conversation"> | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeFilter<"Conversation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    memoryRecord?: XOR<MemoryRecordRelationFilter, MemoryRecordWhereInput>
    timelineAnalysis?: TimelineAnalysisListRelationFilter
  }, "id">

  export type ConversationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConversationCountOrderByAggregateInput
    _avg?: ConversationAvgOrderByAggregateInput
    _max?: ConversationMaxOrderByAggregateInput
    _min?: ConversationMinOrderByAggregateInput
    _sum?: ConversationSumOrderByAggregateInput
  }

  export type ConversationScalarWhereWithAggregatesInput = {
    AND?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    OR?: ConversationScalarWhereWithAggregatesInput[]
    NOT?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Conversation"> | number
    userId?: IntWithAggregatesFilter<"Conversation"> | number
    memoryRecordId?: IntWithAggregatesFilter<"Conversation"> | number
    conversationData?: StringWithAggregatesFilter<"Conversation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
  }

  export type ThoughtAnalysisWhereInput = {
    AND?: ThoughtAnalysisWhereInput | ThoughtAnalysisWhereInput[]
    OR?: ThoughtAnalysisWhereInput[]
    NOT?: ThoughtAnalysisWhereInput | ThoughtAnalysisWhereInput[]
    id?: IntFilter<"ThoughtAnalysis"> | number
    userId?: IntFilter<"ThoughtAnalysis"> | number
    analysisType?: StringFilter<"ThoughtAnalysis"> | string
    timeRange?: StringNullableFilter<"ThoughtAnalysis"> | string | null
    analysisResult?: StringFilter<"ThoughtAnalysis"> | string
    createdAt?: DateTimeFilter<"ThoughtAnalysis"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ThoughtAnalysisOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    analysisType?: SortOrder
    timeRange?: SortOrderInput | SortOrder
    analysisResult?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ThoughtAnalysisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ThoughtAnalysisWhereInput | ThoughtAnalysisWhereInput[]
    OR?: ThoughtAnalysisWhereInput[]
    NOT?: ThoughtAnalysisWhereInput | ThoughtAnalysisWhereInput[]
    userId?: IntFilter<"ThoughtAnalysis"> | number
    analysisType?: StringFilter<"ThoughtAnalysis"> | string
    timeRange?: StringNullableFilter<"ThoughtAnalysis"> | string | null
    analysisResult?: StringFilter<"ThoughtAnalysis"> | string
    createdAt?: DateTimeFilter<"ThoughtAnalysis"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ThoughtAnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    analysisType?: SortOrder
    timeRange?: SortOrderInput | SortOrder
    analysisResult?: SortOrder
    createdAt?: SortOrder
    _count?: ThoughtAnalysisCountOrderByAggregateInput
    _avg?: ThoughtAnalysisAvgOrderByAggregateInput
    _max?: ThoughtAnalysisMaxOrderByAggregateInput
    _min?: ThoughtAnalysisMinOrderByAggregateInput
    _sum?: ThoughtAnalysisSumOrderByAggregateInput
  }

  export type ThoughtAnalysisScalarWhereWithAggregatesInput = {
    AND?: ThoughtAnalysisScalarWhereWithAggregatesInput | ThoughtAnalysisScalarWhereWithAggregatesInput[]
    OR?: ThoughtAnalysisScalarWhereWithAggregatesInput[]
    NOT?: ThoughtAnalysisScalarWhereWithAggregatesInput | ThoughtAnalysisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ThoughtAnalysis"> | number
    userId?: IntWithAggregatesFilter<"ThoughtAnalysis"> | number
    analysisType?: StringWithAggregatesFilter<"ThoughtAnalysis"> | string
    timeRange?: StringNullableWithAggregatesFilter<"ThoughtAnalysis"> | string | null
    analysisResult?: StringWithAggregatesFilter<"ThoughtAnalysis"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ThoughtAnalysis"> | Date | string
  }

  export type TimelineAnalysisWhereInput = {
    AND?: TimelineAnalysisWhereInput | TimelineAnalysisWhereInput[]
    OR?: TimelineAnalysisWhereInput[]
    NOT?: TimelineAnalysisWhereInput | TimelineAnalysisWhereInput[]
    id?: IntFilter<"TimelineAnalysis"> | number
    userId?: IntFilter<"TimelineAnalysis"> | number
    memoryRecordId?: IntFilter<"TimelineAnalysis"> | number
    conversationId?: IntNullableFilter<"TimelineAnalysis"> | number | null
    analysisStage?: StringFilter<"TimelineAnalysis"> | string
    psychologicalInsight?: StringFilter<"TimelineAnalysis"> | string
    emotionalState?: StringNullableFilter<"TimelineAnalysis"> | string | null
    growthIndicators?: StringNullableFilter<"TimelineAnalysis"> | string | null
    createdAt?: DateTimeFilter<"TimelineAnalysis"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    memoryRecord?: XOR<MemoryRecordRelationFilter, MemoryRecordWhereInput>
    conversation?: XOR<ConversationNullableRelationFilter, ConversationWhereInput> | null
  }

  export type TimelineAnalysisOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationId?: SortOrderInput | SortOrder
    analysisStage?: SortOrder
    psychologicalInsight?: SortOrder
    emotionalState?: SortOrderInput | SortOrder
    growthIndicators?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    memoryRecord?: MemoryRecordOrderByWithRelationInput
    conversation?: ConversationOrderByWithRelationInput
  }

  export type TimelineAnalysisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TimelineAnalysisWhereInput | TimelineAnalysisWhereInput[]
    OR?: TimelineAnalysisWhereInput[]
    NOT?: TimelineAnalysisWhereInput | TimelineAnalysisWhereInput[]
    userId?: IntFilter<"TimelineAnalysis"> | number
    memoryRecordId?: IntFilter<"TimelineAnalysis"> | number
    conversationId?: IntNullableFilter<"TimelineAnalysis"> | number | null
    analysisStage?: StringFilter<"TimelineAnalysis"> | string
    psychologicalInsight?: StringFilter<"TimelineAnalysis"> | string
    emotionalState?: StringNullableFilter<"TimelineAnalysis"> | string | null
    growthIndicators?: StringNullableFilter<"TimelineAnalysis"> | string | null
    createdAt?: DateTimeFilter<"TimelineAnalysis"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    memoryRecord?: XOR<MemoryRecordRelationFilter, MemoryRecordWhereInput>
    conversation?: XOR<ConversationNullableRelationFilter, ConversationWhereInput> | null
  }, "id">

  export type TimelineAnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationId?: SortOrderInput | SortOrder
    analysisStage?: SortOrder
    psychologicalInsight?: SortOrder
    emotionalState?: SortOrderInput | SortOrder
    growthIndicators?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TimelineAnalysisCountOrderByAggregateInput
    _avg?: TimelineAnalysisAvgOrderByAggregateInput
    _max?: TimelineAnalysisMaxOrderByAggregateInput
    _min?: TimelineAnalysisMinOrderByAggregateInput
    _sum?: TimelineAnalysisSumOrderByAggregateInput
  }

  export type TimelineAnalysisScalarWhereWithAggregatesInput = {
    AND?: TimelineAnalysisScalarWhereWithAggregatesInput | TimelineAnalysisScalarWhereWithAggregatesInput[]
    OR?: TimelineAnalysisScalarWhereWithAggregatesInput[]
    NOT?: TimelineAnalysisScalarWhereWithAggregatesInput | TimelineAnalysisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TimelineAnalysis"> | number
    userId?: IntWithAggregatesFilter<"TimelineAnalysis"> | number
    memoryRecordId?: IntWithAggregatesFilter<"TimelineAnalysis"> | number
    conversationId?: IntNullableWithAggregatesFilter<"TimelineAnalysis"> | number | null
    analysisStage?: StringWithAggregatesFilter<"TimelineAnalysis"> | string
    psychologicalInsight?: StringWithAggregatesFilter<"TimelineAnalysis"> | string
    emotionalState?: StringNullableWithAggregatesFilter<"TimelineAnalysis"> | string | null
    growthIndicators?: StringNullableWithAggregatesFilter<"TimelineAnalysis"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TimelineAnalysis"> | Date | string
  }

  export type UserCreateInput = {
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memoryRecords?: MemoryRecordCreateNestedManyWithoutUserInput
    conversations?: ConversationCreateNestedManyWithoutUserInput
    thoughtAnalysis?: ThoughtAnalysisCreateNestedManyWithoutUserInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memoryRecords?: MemoryRecordUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutUserInput
    thoughtAnalysis?: ThoughtAnalysisUncheckedCreateNestedManyWithoutUserInput
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecords?: MemoryRecordUpdateManyWithoutUserNestedInput
    conversations?: ConversationUpdateManyWithoutUserNestedInput
    thoughtAnalysis?: ThoughtAnalysisUpdateManyWithoutUserNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecords?: MemoryRecordUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutUserNestedInput
    thoughtAnalysis?: ThoughtAnalysisUncheckedUpdateManyWithoutUserNestedInput
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemoryRecordCreateInput = {
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMemoryRecordsInput
    conversations?: ConversationCreateNestedManyWithoutMemoryRecordInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutMemoryRecordInput
  }

  export type MemoryRecordUncheckedCreateInput = {
    id?: number
    userId: number
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    conversations?: ConversationUncheckedCreateNestedManyWithoutMemoryRecordInput
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutMemoryRecordInput
  }

  export type MemoryRecordUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemoryRecordsNestedInput
    conversations?: ConversationUpdateManyWithoutMemoryRecordNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutMemoryRecordNestedInput
  }

  export type MemoryRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUncheckedUpdateManyWithoutMemoryRecordNestedInput
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutMemoryRecordNestedInput
  }

  export type MemoryRecordCreateManyInput = {
    id?: number
    userId: number
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
  }

  export type MemoryRecordUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemoryRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationCreateInput = {
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConversationsInput
    memoryRecord: MemoryRecordCreateNestedOneWithoutConversationsInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateInput = {
    id?: number
    userId: number
    memoryRecordId: number
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationUpdateInput = {
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConversationsNestedInput
    memoryRecord?: MemoryRecordUpdateOneRequiredWithoutConversationsNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationCreateManyInput = {
    id?: number
    userId: number
    memoryRecordId: number
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationUpdateManyMutationInput = {
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThoughtAnalysisCreateInput = {
    analysisType: string
    timeRange?: string | null
    analysisResult: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutThoughtAnalysisInput
  }

  export type ThoughtAnalysisUncheckedCreateInput = {
    id?: number
    userId: number
    analysisType: string
    timeRange?: string | null
    analysisResult: string
    createdAt?: Date | string
  }

  export type ThoughtAnalysisUpdateInput = {
    analysisType?: StringFieldUpdateOperationsInput | string
    timeRange?: NullableStringFieldUpdateOperationsInput | string | null
    analysisResult?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutThoughtAnalysisNestedInput
  }

  export type ThoughtAnalysisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    analysisType?: StringFieldUpdateOperationsInput | string
    timeRange?: NullableStringFieldUpdateOperationsInput | string | null
    analysisResult?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThoughtAnalysisCreateManyInput = {
    id?: number
    userId: number
    analysisType: string
    timeRange?: string | null
    analysisResult: string
    createdAt?: Date | string
  }

  export type ThoughtAnalysisUpdateManyMutationInput = {
    analysisType?: StringFieldUpdateOperationsInput | string
    timeRange?: NullableStringFieldUpdateOperationsInput | string | null
    analysisResult?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThoughtAnalysisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    analysisType?: StringFieldUpdateOperationsInput | string
    timeRange?: NullableStringFieldUpdateOperationsInput | string | null
    analysisResult?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineAnalysisCreateInput = {
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTimelineAnalysisInput
    memoryRecord: MemoryRecordCreateNestedOneWithoutTimelineAnalysisInput
    conversation?: ConversationCreateNestedOneWithoutTimelineAnalysisInput
  }

  export type TimelineAnalysisUncheckedCreateInput = {
    id?: number
    userId: number
    memoryRecordId: number
    conversationId?: number | null
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
  }

  export type TimelineAnalysisUpdateInput = {
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimelineAnalysisNestedInput
    memoryRecord?: MemoryRecordUpdateOneRequiredWithoutTimelineAnalysisNestedInput
    conversation?: ConversationUpdateOneWithoutTimelineAnalysisNestedInput
  }

  export type TimelineAnalysisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineAnalysisCreateManyInput = {
    id?: number
    userId: number
    memoryRecordId: number
    conversationId?: number | null
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
  }

  export type TimelineAnalysisUpdateManyMutationInput = {
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineAnalysisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MemoryRecordListRelationFilter = {
    every?: MemoryRecordWhereInput
    some?: MemoryRecordWhereInput
    none?: MemoryRecordWhereInput
  }

  export type ConversationListRelationFilter = {
    every?: ConversationWhereInput
    some?: ConversationWhereInput
    none?: ConversationWhereInput
  }

  export type ThoughtAnalysisListRelationFilter = {
    every?: ThoughtAnalysisWhereInput
    some?: ThoughtAnalysisWhereInput
    none?: ThoughtAnalysisWhereInput
  }

  export type TimelineAnalysisListRelationFilter = {
    every?: TimelineAnalysisWhereInput
    some?: TimelineAnalysisWhereInput
    none?: TimelineAnalysisWhereInput
  }

  export type MemoryRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThoughtAnalysisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimelineAnalysisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MemoryRecordCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    mood?: SortOrder
    tags?: SortOrder
    aiAnalysis?: SortOrder
    createdAt?: SortOrder
  }

  export type MemoryRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mood?: SortOrder
  }

  export type MemoryRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    mood?: SortOrder
    tags?: SortOrder
    aiAnalysis?: SortOrder
    createdAt?: SortOrder
  }

  export type MemoryRecordMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    mood?: SortOrder
    tags?: SortOrder
    aiAnalysis?: SortOrder
    createdAt?: SortOrder
  }

  export type MemoryRecordSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mood?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type MemoryRecordRelationFilter = {
    is?: MemoryRecordWhereInput
    isNot?: MemoryRecordWhereInput
  }

  export type ConversationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
  }

  export type ConversationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
  }

  export type ThoughtAnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    analysisType?: SortOrder
    timeRange?: SortOrder
    analysisResult?: SortOrder
    createdAt?: SortOrder
  }

  export type ThoughtAnalysisAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ThoughtAnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    analysisType?: SortOrder
    timeRange?: SortOrder
    analysisResult?: SortOrder
    createdAt?: SortOrder
  }

  export type ThoughtAnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    analysisType?: SortOrder
    timeRange?: SortOrder
    analysisResult?: SortOrder
    createdAt?: SortOrder
  }

  export type ThoughtAnalysisSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ConversationNullableRelationFilter = {
    is?: ConversationWhereInput | null
    isNot?: ConversationWhereInput | null
  }

  export type TimelineAnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationId?: SortOrder
    analysisStage?: SortOrder
    psychologicalInsight?: SortOrder
    emotionalState?: SortOrder
    growthIndicators?: SortOrder
    createdAt?: SortOrder
  }

  export type TimelineAnalysisAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationId?: SortOrder
  }

  export type TimelineAnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationId?: SortOrder
    analysisStage?: SortOrder
    psychologicalInsight?: SortOrder
    emotionalState?: SortOrder
    growthIndicators?: SortOrder
    createdAt?: SortOrder
  }

  export type TimelineAnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationId?: SortOrder
    analysisStage?: SortOrder
    psychologicalInsight?: SortOrder
    emotionalState?: SortOrder
    growthIndicators?: SortOrder
    createdAt?: SortOrder
  }

  export type TimelineAnalysisSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memoryRecordId?: SortOrder
    conversationId?: SortOrder
  }

  export type MemoryRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<MemoryRecordCreateWithoutUserInput, MemoryRecordUncheckedCreateWithoutUserInput> | MemoryRecordCreateWithoutUserInput[] | MemoryRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemoryRecordCreateOrConnectWithoutUserInput | MemoryRecordCreateOrConnectWithoutUserInput[]
    createMany?: MemoryRecordCreateManyUserInputEnvelope
    connect?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
  }

  export type ConversationCreateNestedManyWithoutUserInput = {
    create?: XOR<ConversationCreateWithoutUserInput, ConversationUncheckedCreateWithoutUserInput> | ConversationCreateWithoutUserInput[] | ConversationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutUserInput | ConversationCreateOrConnectWithoutUserInput[]
    createMany?: ConversationCreateManyUserInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type ThoughtAnalysisCreateNestedManyWithoutUserInput = {
    create?: XOR<ThoughtAnalysisCreateWithoutUserInput, ThoughtAnalysisUncheckedCreateWithoutUserInput> | ThoughtAnalysisCreateWithoutUserInput[] | ThoughtAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThoughtAnalysisCreateOrConnectWithoutUserInput | ThoughtAnalysisCreateOrConnectWithoutUserInput[]
    createMany?: ThoughtAnalysisCreateManyUserInputEnvelope
    connect?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
  }

  export type TimelineAnalysisCreateNestedManyWithoutUserInput = {
    create?: XOR<TimelineAnalysisCreateWithoutUserInput, TimelineAnalysisUncheckedCreateWithoutUserInput> | TimelineAnalysisCreateWithoutUserInput[] | TimelineAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutUserInput | TimelineAnalysisCreateOrConnectWithoutUserInput[]
    createMany?: TimelineAnalysisCreateManyUserInputEnvelope
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
  }

  export type MemoryRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MemoryRecordCreateWithoutUserInput, MemoryRecordUncheckedCreateWithoutUserInput> | MemoryRecordCreateWithoutUserInput[] | MemoryRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemoryRecordCreateOrConnectWithoutUserInput | MemoryRecordCreateOrConnectWithoutUserInput[]
    createMany?: MemoryRecordCreateManyUserInputEnvelope
    connect?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConversationCreateWithoutUserInput, ConversationUncheckedCreateWithoutUserInput> | ConversationCreateWithoutUserInput[] | ConversationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutUserInput | ConversationCreateOrConnectWithoutUserInput[]
    createMany?: ConversationCreateManyUserInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type ThoughtAnalysisUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ThoughtAnalysisCreateWithoutUserInput, ThoughtAnalysisUncheckedCreateWithoutUserInput> | ThoughtAnalysisCreateWithoutUserInput[] | ThoughtAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThoughtAnalysisCreateOrConnectWithoutUserInput | ThoughtAnalysisCreateOrConnectWithoutUserInput[]
    createMany?: ThoughtAnalysisCreateManyUserInputEnvelope
    connect?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
  }

  export type TimelineAnalysisUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TimelineAnalysisCreateWithoutUserInput, TimelineAnalysisUncheckedCreateWithoutUserInput> | TimelineAnalysisCreateWithoutUserInput[] | TimelineAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutUserInput | TimelineAnalysisCreateOrConnectWithoutUserInput[]
    createMany?: TimelineAnalysisCreateManyUserInputEnvelope
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MemoryRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemoryRecordCreateWithoutUserInput, MemoryRecordUncheckedCreateWithoutUserInput> | MemoryRecordCreateWithoutUserInput[] | MemoryRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemoryRecordCreateOrConnectWithoutUserInput | MemoryRecordCreateOrConnectWithoutUserInput[]
    upsert?: MemoryRecordUpsertWithWhereUniqueWithoutUserInput | MemoryRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemoryRecordCreateManyUserInputEnvelope
    set?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
    disconnect?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
    delete?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
    connect?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
    update?: MemoryRecordUpdateWithWhereUniqueWithoutUserInput | MemoryRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemoryRecordUpdateManyWithWhereWithoutUserInput | MemoryRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemoryRecordScalarWhereInput | MemoryRecordScalarWhereInput[]
  }

  export type ConversationUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConversationCreateWithoutUserInput, ConversationUncheckedCreateWithoutUserInput> | ConversationCreateWithoutUserInput[] | ConversationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutUserInput | ConversationCreateOrConnectWithoutUserInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutUserInput | ConversationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConversationCreateManyUserInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutUserInput | ConversationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutUserInput | ConversationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type ThoughtAnalysisUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThoughtAnalysisCreateWithoutUserInput, ThoughtAnalysisUncheckedCreateWithoutUserInput> | ThoughtAnalysisCreateWithoutUserInput[] | ThoughtAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThoughtAnalysisCreateOrConnectWithoutUserInput | ThoughtAnalysisCreateOrConnectWithoutUserInput[]
    upsert?: ThoughtAnalysisUpsertWithWhereUniqueWithoutUserInput | ThoughtAnalysisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThoughtAnalysisCreateManyUserInputEnvelope
    set?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
    disconnect?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
    delete?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
    connect?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
    update?: ThoughtAnalysisUpdateWithWhereUniqueWithoutUserInput | ThoughtAnalysisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThoughtAnalysisUpdateManyWithWhereWithoutUserInput | ThoughtAnalysisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThoughtAnalysisScalarWhereInput | ThoughtAnalysisScalarWhereInput[]
  }

  export type TimelineAnalysisUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimelineAnalysisCreateWithoutUserInput, TimelineAnalysisUncheckedCreateWithoutUserInput> | TimelineAnalysisCreateWithoutUserInput[] | TimelineAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutUserInput | TimelineAnalysisCreateOrConnectWithoutUserInput[]
    upsert?: TimelineAnalysisUpsertWithWhereUniqueWithoutUserInput | TimelineAnalysisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimelineAnalysisCreateManyUserInputEnvelope
    set?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    disconnect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    delete?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    update?: TimelineAnalysisUpdateWithWhereUniqueWithoutUserInput | TimelineAnalysisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimelineAnalysisUpdateManyWithWhereWithoutUserInput | TimelineAnalysisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimelineAnalysisScalarWhereInput | TimelineAnalysisScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MemoryRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemoryRecordCreateWithoutUserInput, MemoryRecordUncheckedCreateWithoutUserInput> | MemoryRecordCreateWithoutUserInput[] | MemoryRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemoryRecordCreateOrConnectWithoutUserInput | MemoryRecordCreateOrConnectWithoutUserInput[]
    upsert?: MemoryRecordUpsertWithWhereUniqueWithoutUserInput | MemoryRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemoryRecordCreateManyUserInputEnvelope
    set?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
    disconnect?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
    delete?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
    connect?: MemoryRecordWhereUniqueInput | MemoryRecordWhereUniqueInput[]
    update?: MemoryRecordUpdateWithWhereUniqueWithoutUserInput | MemoryRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemoryRecordUpdateManyWithWhereWithoutUserInput | MemoryRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemoryRecordScalarWhereInput | MemoryRecordScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConversationCreateWithoutUserInput, ConversationUncheckedCreateWithoutUserInput> | ConversationCreateWithoutUserInput[] | ConversationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutUserInput | ConversationCreateOrConnectWithoutUserInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutUserInput | ConversationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConversationCreateManyUserInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutUserInput | ConversationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutUserInput | ConversationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type ThoughtAnalysisUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThoughtAnalysisCreateWithoutUserInput, ThoughtAnalysisUncheckedCreateWithoutUserInput> | ThoughtAnalysisCreateWithoutUserInput[] | ThoughtAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThoughtAnalysisCreateOrConnectWithoutUserInput | ThoughtAnalysisCreateOrConnectWithoutUserInput[]
    upsert?: ThoughtAnalysisUpsertWithWhereUniqueWithoutUserInput | ThoughtAnalysisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThoughtAnalysisCreateManyUserInputEnvelope
    set?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
    disconnect?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
    delete?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
    connect?: ThoughtAnalysisWhereUniqueInput | ThoughtAnalysisWhereUniqueInput[]
    update?: ThoughtAnalysisUpdateWithWhereUniqueWithoutUserInput | ThoughtAnalysisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThoughtAnalysisUpdateManyWithWhereWithoutUserInput | ThoughtAnalysisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThoughtAnalysisScalarWhereInput | ThoughtAnalysisScalarWhereInput[]
  }

  export type TimelineAnalysisUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimelineAnalysisCreateWithoutUserInput, TimelineAnalysisUncheckedCreateWithoutUserInput> | TimelineAnalysisCreateWithoutUserInput[] | TimelineAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutUserInput | TimelineAnalysisCreateOrConnectWithoutUserInput[]
    upsert?: TimelineAnalysisUpsertWithWhereUniqueWithoutUserInput | TimelineAnalysisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimelineAnalysisCreateManyUserInputEnvelope
    set?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    disconnect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    delete?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    update?: TimelineAnalysisUpdateWithWhereUniqueWithoutUserInput | TimelineAnalysisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimelineAnalysisUpdateManyWithWhereWithoutUserInput | TimelineAnalysisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimelineAnalysisScalarWhereInput | TimelineAnalysisScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMemoryRecordsInput = {
    create?: XOR<UserCreateWithoutMemoryRecordsInput, UserUncheckedCreateWithoutMemoryRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemoryRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationCreateNestedManyWithoutMemoryRecordInput = {
    create?: XOR<ConversationCreateWithoutMemoryRecordInput, ConversationUncheckedCreateWithoutMemoryRecordInput> | ConversationCreateWithoutMemoryRecordInput[] | ConversationUncheckedCreateWithoutMemoryRecordInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMemoryRecordInput | ConversationCreateOrConnectWithoutMemoryRecordInput[]
    createMany?: ConversationCreateManyMemoryRecordInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type TimelineAnalysisCreateNestedManyWithoutMemoryRecordInput = {
    create?: XOR<TimelineAnalysisCreateWithoutMemoryRecordInput, TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput> | TimelineAnalysisCreateWithoutMemoryRecordInput[] | TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutMemoryRecordInput | TimelineAnalysisCreateOrConnectWithoutMemoryRecordInput[]
    createMany?: TimelineAnalysisCreateManyMemoryRecordInputEnvelope
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutMemoryRecordInput = {
    create?: XOR<ConversationCreateWithoutMemoryRecordInput, ConversationUncheckedCreateWithoutMemoryRecordInput> | ConversationCreateWithoutMemoryRecordInput[] | ConversationUncheckedCreateWithoutMemoryRecordInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMemoryRecordInput | ConversationCreateOrConnectWithoutMemoryRecordInput[]
    createMany?: ConversationCreateManyMemoryRecordInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type TimelineAnalysisUncheckedCreateNestedManyWithoutMemoryRecordInput = {
    create?: XOR<TimelineAnalysisCreateWithoutMemoryRecordInput, TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput> | TimelineAnalysisCreateWithoutMemoryRecordInput[] | TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutMemoryRecordInput | TimelineAnalysisCreateOrConnectWithoutMemoryRecordInput[]
    createMany?: TimelineAnalysisCreateManyMemoryRecordInputEnvelope
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutMemoryRecordsNestedInput = {
    create?: XOR<UserCreateWithoutMemoryRecordsInput, UserUncheckedCreateWithoutMemoryRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemoryRecordsInput
    upsert?: UserUpsertWithoutMemoryRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMemoryRecordsInput, UserUpdateWithoutMemoryRecordsInput>, UserUncheckedUpdateWithoutMemoryRecordsInput>
  }

  export type ConversationUpdateManyWithoutMemoryRecordNestedInput = {
    create?: XOR<ConversationCreateWithoutMemoryRecordInput, ConversationUncheckedCreateWithoutMemoryRecordInput> | ConversationCreateWithoutMemoryRecordInput[] | ConversationUncheckedCreateWithoutMemoryRecordInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMemoryRecordInput | ConversationCreateOrConnectWithoutMemoryRecordInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutMemoryRecordInput | ConversationUpsertWithWhereUniqueWithoutMemoryRecordInput[]
    createMany?: ConversationCreateManyMemoryRecordInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutMemoryRecordInput | ConversationUpdateWithWhereUniqueWithoutMemoryRecordInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutMemoryRecordInput | ConversationUpdateManyWithWhereWithoutMemoryRecordInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type TimelineAnalysisUpdateManyWithoutMemoryRecordNestedInput = {
    create?: XOR<TimelineAnalysisCreateWithoutMemoryRecordInput, TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput> | TimelineAnalysisCreateWithoutMemoryRecordInput[] | TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutMemoryRecordInput | TimelineAnalysisCreateOrConnectWithoutMemoryRecordInput[]
    upsert?: TimelineAnalysisUpsertWithWhereUniqueWithoutMemoryRecordInput | TimelineAnalysisUpsertWithWhereUniqueWithoutMemoryRecordInput[]
    createMany?: TimelineAnalysisCreateManyMemoryRecordInputEnvelope
    set?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    disconnect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    delete?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    update?: TimelineAnalysisUpdateWithWhereUniqueWithoutMemoryRecordInput | TimelineAnalysisUpdateWithWhereUniqueWithoutMemoryRecordInput[]
    updateMany?: TimelineAnalysisUpdateManyWithWhereWithoutMemoryRecordInput | TimelineAnalysisUpdateManyWithWhereWithoutMemoryRecordInput[]
    deleteMany?: TimelineAnalysisScalarWhereInput | TimelineAnalysisScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutMemoryRecordNestedInput = {
    create?: XOR<ConversationCreateWithoutMemoryRecordInput, ConversationUncheckedCreateWithoutMemoryRecordInput> | ConversationCreateWithoutMemoryRecordInput[] | ConversationUncheckedCreateWithoutMemoryRecordInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMemoryRecordInput | ConversationCreateOrConnectWithoutMemoryRecordInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutMemoryRecordInput | ConversationUpsertWithWhereUniqueWithoutMemoryRecordInput[]
    createMany?: ConversationCreateManyMemoryRecordInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutMemoryRecordInput | ConversationUpdateWithWhereUniqueWithoutMemoryRecordInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutMemoryRecordInput | ConversationUpdateManyWithWhereWithoutMemoryRecordInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type TimelineAnalysisUncheckedUpdateManyWithoutMemoryRecordNestedInput = {
    create?: XOR<TimelineAnalysisCreateWithoutMemoryRecordInput, TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput> | TimelineAnalysisCreateWithoutMemoryRecordInput[] | TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutMemoryRecordInput | TimelineAnalysisCreateOrConnectWithoutMemoryRecordInput[]
    upsert?: TimelineAnalysisUpsertWithWhereUniqueWithoutMemoryRecordInput | TimelineAnalysisUpsertWithWhereUniqueWithoutMemoryRecordInput[]
    createMany?: TimelineAnalysisCreateManyMemoryRecordInputEnvelope
    set?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    disconnect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    delete?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    update?: TimelineAnalysisUpdateWithWhereUniqueWithoutMemoryRecordInput | TimelineAnalysisUpdateWithWhereUniqueWithoutMemoryRecordInput[]
    updateMany?: TimelineAnalysisUpdateManyWithWhereWithoutMemoryRecordInput | TimelineAnalysisUpdateManyWithWhereWithoutMemoryRecordInput[]
    deleteMany?: TimelineAnalysisScalarWhereInput | TimelineAnalysisScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutConversationsInput = {
    create?: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsInput
    connect?: UserWhereUniqueInput
  }

  export type MemoryRecordCreateNestedOneWithoutConversationsInput = {
    create?: XOR<MemoryRecordCreateWithoutConversationsInput, MemoryRecordUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: MemoryRecordCreateOrConnectWithoutConversationsInput
    connect?: MemoryRecordWhereUniqueInput
  }

  export type TimelineAnalysisCreateNestedManyWithoutConversationInput = {
    create?: XOR<TimelineAnalysisCreateWithoutConversationInput, TimelineAnalysisUncheckedCreateWithoutConversationInput> | TimelineAnalysisCreateWithoutConversationInput[] | TimelineAnalysisUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutConversationInput | TimelineAnalysisCreateOrConnectWithoutConversationInput[]
    createMany?: TimelineAnalysisCreateManyConversationInputEnvelope
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
  }

  export type TimelineAnalysisUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<TimelineAnalysisCreateWithoutConversationInput, TimelineAnalysisUncheckedCreateWithoutConversationInput> | TimelineAnalysisCreateWithoutConversationInput[] | TimelineAnalysisUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutConversationInput | TimelineAnalysisCreateOrConnectWithoutConversationInput[]
    createMany?: TimelineAnalysisCreateManyConversationInputEnvelope
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutConversationsNestedInput = {
    create?: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsInput
    upsert?: UserUpsertWithoutConversationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConversationsInput, UserUpdateWithoutConversationsInput>, UserUncheckedUpdateWithoutConversationsInput>
  }

  export type MemoryRecordUpdateOneRequiredWithoutConversationsNestedInput = {
    create?: XOR<MemoryRecordCreateWithoutConversationsInput, MemoryRecordUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: MemoryRecordCreateOrConnectWithoutConversationsInput
    upsert?: MemoryRecordUpsertWithoutConversationsInput
    connect?: MemoryRecordWhereUniqueInput
    update?: XOR<XOR<MemoryRecordUpdateToOneWithWhereWithoutConversationsInput, MemoryRecordUpdateWithoutConversationsInput>, MemoryRecordUncheckedUpdateWithoutConversationsInput>
  }

  export type TimelineAnalysisUpdateManyWithoutConversationNestedInput = {
    create?: XOR<TimelineAnalysisCreateWithoutConversationInput, TimelineAnalysisUncheckedCreateWithoutConversationInput> | TimelineAnalysisCreateWithoutConversationInput[] | TimelineAnalysisUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutConversationInput | TimelineAnalysisCreateOrConnectWithoutConversationInput[]
    upsert?: TimelineAnalysisUpsertWithWhereUniqueWithoutConversationInput | TimelineAnalysisUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: TimelineAnalysisCreateManyConversationInputEnvelope
    set?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    disconnect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    delete?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    update?: TimelineAnalysisUpdateWithWhereUniqueWithoutConversationInput | TimelineAnalysisUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: TimelineAnalysisUpdateManyWithWhereWithoutConversationInput | TimelineAnalysisUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: TimelineAnalysisScalarWhereInput | TimelineAnalysisScalarWhereInput[]
  }

  export type TimelineAnalysisUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<TimelineAnalysisCreateWithoutConversationInput, TimelineAnalysisUncheckedCreateWithoutConversationInput> | TimelineAnalysisCreateWithoutConversationInput[] | TimelineAnalysisUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: TimelineAnalysisCreateOrConnectWithoutConversationInput | TimelineAnalysisCreateOrConnectWithoutConversationInput[]
    upsert?: TimelineAnalysisUpsertWithWhereUniqueWithoutConversationInput | TimelineAnalysisUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: TimelineAnalysisCreateManyConversationInputEnvelope
    set?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    disconnect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    delete?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    connect?: TimelineAnalysisWhereUniqueInput | TimelineAnalysisWhereUniqueInput[]
    update?: TimelineAnalysisUpdateWithWhereUniqueWithoutConversationInput | TimelineAnalysisUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: TimelineAnalysisUpdateManyWithWhereWithoutConversationInput | TimelineAnalysisUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: TimelineAnalysisScalarWhereInput | TimelineAnalysisScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutThoughtAnalysisInput = {
    create?: XOR<UserCreateWithoutThoughtAnalysisInput, UserUncheckedCreateWithoutThoughtAnalysisInput>
    connectOrCreate?: UserCreateOrConnectWithoutThoughtAnalysisInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutThoughtAnalysisNestedInput = {
    create?: XOR<UserCreateWithoutThoughtAnalysisInput, UserUncheckedCreateWithoutThoughtAnalysisInput>
    connectOrCreate?: UserCreateOrConnectWithoutThoughtAnalysisInput
    upsert?: UserUpsertWithoutThoughtAnalysisInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutThoughtAnalysisInput, UserUpdateWithoutThoughtAnalysisInput>, UserUncheckedUpdateWithoutThoughtAnalysisInput>
  }

  export type UserCreateNestedOneWithoutTimelineAnalysisInput = {
    create?: XOR<UserCreateWithoutTimelineAnalysisInput, UserUncheckedCreateWithoutTimelineAnalysisInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimelineAnalysisInput
    connect?: UserWhereUniqueInput
  }

  export type MemoryRecordCreateNestedOneWithoutTimelineAnalysisInput = {
    create?: XOR<MemoryRecordCreateWithoutTimelineAnalysisInput, MemoryRecordUncheckedCreateWithoutTimelineAnalysisInput>
    connectOrCreate?: MemoryRecordCreateOrConnectWithoutTimelineAnalysisInput
    connect?: MemoryRecordWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutTimelineAnalysisInput = {
    create?: XOR<ConversationCreateWithoutTimelineAnalysisInput, ConversationUncheckedCreateWithoutTimelineAnalysisInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutTimelineAnalysisInput
    connect?: ConversationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTimelineAnalysisNestedInput = {
    create?: XOR<UserCreateWithoutTimelineAnalysisInput, UserUncheckedCreateWithoutTimelineAnalysisInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimelineAnalysisInput
    upsert?: UserUpsertWithoutTimelineAnalysisInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTimelineAnalysisInput, UserUpdateWithoutTimelineAnalysisInput>, UserUncheckedUpdateWithoutTimelineAnalysisInput>
  }

  export type MemoryRecordUpdateOneRequiredWithoutTimelineAnalysisNestedInput = {
    create?: XOR<MemoryRecordCreateWithoutTimelineAnalysisInput, MemoryRecordUncheckedCreateWithoutTimelineAnalysisInput>
    connectOrCreate?: MemoryRecordCreateOrConnectWithoutTimelineAnalysisInput
    upsert?: MemoryRecordUpsertWithoutTimelineAnalysisInput
    connect?: MemoryRecordWhereUniqueInput
    update?: XOR<XOR<MemoryRecordUpdateToOneWithWhereWithoutTimelineAnalysisInput, MemoryRecordUpdateWithoutTimelineAnalysisInput>, MemoryRecordUncheckedUpdateWithoutTimelineAnalysisInput>
  }

  export type ConversationUpdateOneWithoutTimelineAnalysisNestedInput = {
    create?: XOR<ConversationCreateWithoutTimelineAnalysisInput, ConversationUncheckedCreateWithoutTimelineAnalysisInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutTimelineAnalysisInput
    upsert?: ConversationUpsertWithoutTimelineAnalysisInput
    disconnect?: ConversationWhereInput | boolean
    delete?: ConversationWhereInput | boolean
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutTimelineAnalysisInput, ConversationUpdateWithoutTimelineAnalysisInput>, ConversationUncheckedUpdateWithoutTimelineAnalysisInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MemoryRecordCreateWithoutUserInput = {
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    conversations?: ConversationCreateNestedManyWithoutMemoryRecordInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutMemoryRecordInput
  }

  export type MemoryRecordUncheckedCreateWithoutUserInput = {
    id?: number
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    conversations?: ConversationUncheckedCreateNestedManyWithoutMemoryRecordInput
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutMemoryRecordInput
  }

  export type MemoryRecordCreateOrConnectWithoutUserInput = {
    where: MemoryRecordWhereUniqueInput
    create: XOR<MemoryRecordCreateWithoutUserInput, MemoryRecordUncheckedCreateWithoutUserInput>
  }

  export type MemoryRecordCreateManyUserInputEnvelope = {
    data: MemoryRecordCreateManyUserInput | MemoryRecordCreateManyUserInput[]
  }

  export type ConversationCreateWithoutUserInput = {
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memoryRecord: MemoryRecordCreateNestedOneWithoutConversationsInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutUserInput = {
    id?: number
    memoryRecordId: number
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutUserInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutUserInput, ConversationUncheckedCreateWithoutUserInput>
  }

  export type ConversationCreateManyUserInputEnvelope = {
    data: ConversationCreateManyUserInput | ConversationCreateManyUserInput[]
  }

  export type ThoughtAnalysisCreateWithoutUserInput = {
    analysisType: string
    timeRange?: string | null
    analysisResult: string
    createdAt?: Date | string
  }

  export type ThoughtAnalysisUncheckedCreateWithoutUserInput = {
    id?: number
    analysisType: string
    timeRange?: string | null
    analysisResult: string
    createdAt?: Date | string
  }

  export type ThoughtAnalysisCreateOrConnectWithoutUserInput = {
    where: ThoughtAnalysisWhereUniqueInput
    create: XOR<ThoughtAnalysisCreateWithoutUserInput, ThoughtAnalysisUncheckedCreateWithoutUserInput>
  }

  export type ThoughtAnalysisCreateManyUserInputEnvelope = {
    data: ThoughtAnalysisCreateManyUserInput | ThoughtAnalysisCreateManyUserInput[]
  }

  export type TimelineAnalysisCreateWithoutUserInput = {
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
    memoryRecord: MemoryRecordCreateNestedOneWithoutTimelineAnalysisInput
    conversation?: ConversationCreateNestedOneWithoutTimelineAnalysisInput
  }

  export type TimelineAnalysisUncheckedCreateWithoutUserInput = {
    id?: number
    memoryRecordId: number
    conversationId?: number | null
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
  }

  export type TimelineAnalysisCreateOrConnectWithoutUserInput = {
    where: TimelineAnalysisWhereUniqueInput
    create: XOR<TimelineAnalysisCreateWithoutUserInput, TimelineAnalysisUncheckedCreateWithoutUserInput>
  }

  export type TimelineAnalysisCreateManyUserInputEnvelope = {
    data: TimelineAnalysisCreateManyUserInput | TimelineAnalysisCreateManyUserInput[]
  }

  export type MemoryRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: MemoryRecordWhereUniqueInput
    update: XOR<MemoryRecordUpdateWithoutUserInput, MemoryRecordUncheckedUpdateWithoutUserInput>
    create: XOR<MemoryRecordCreateWithoutUserInput, MemoryRecordUncheckedCreateWithoutUserInput>
  }

  export type MemoryRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: MemoryRecordWhereUniqueInput
    data: XOR<MemoryRecordUpdateWithoutUserInput, MemoryRecordUncheckedUpdateWithoutUserInput>
  }

  export type MemoryRecordUpdateManyWithWhereWithoutUserInput = {
    where: MemoryRecordScalarWhereInput
    data: XOR<MemoryRecordUpdateManyMutationInput, MemoryRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type MemoryRecordScalarWhereInput = {
    AND?: MemoryRecordScalarWhereInput | MemoryRecordScalarWhereInput[]
    OR?: MemoryRecordScalarWhereInput[]
    NOT?: MemoryRecordScalarWhereInput | MemoryRecordScalarWhereInput[]
    id?: IntFilter<"MemoryRecord"> | number
    userId?: IntFilter<"MemoryRecord"> | number
    title?: StringNullableFilter<"MemoryRecord"> | string | null
    content?: StringFilter<"MemoryRecord"> | string
    mood?: IntNullableFilter<"MemoryRecord"> | number | null
    tags?: StringNullableFilter<"MemoryRecord"> | string | null
    aiAnalysis?: StringNullableFilter<"MemoryRecord"> | string | null
    createdAt?: DateTimeFilter<"MemoryRecord"> | Date | string
  }

  export type ConversationUpsertWithWhereUniqueWithoutUserInput = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutUserInput, ConversationUncheckedUpdateWithoutUserInput>
    create: XOR<ConversationCreateWithoutUserInput, ConversationUncheckedCreateWithoutUserInput>
  }

  export type ConversationUpdateWithWhereUniqueWithoutUserInput = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutUserInput, ConversationUncheckedUpdateWithoutUserInput>
  }

  export type ConversationUpdateManyWithWhereWithoutUserInput = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutUserInput>
  }

  export type ConversationScalarWhereInput = {
    AND?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    OR?: ConversationScalarWhereInput[]
    NOT?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    id?: IntFilter<"Conversation"> | number
    userId?: IntFilter<"Conversation"> | number
    memoryRecordId?: IntFilter<"Conversation"> | number
    conversationData?: StringFilter<"Conversation"> | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeFilter<"Conversation"> | Date | string
  }

  export type ThoughtAnalysisUpsertWithWhereUniqueWithoutUserInput = {
    where: ThoughtAnalysisWhereUniqueInput
    update: XOR<ThoughtAnalysisUpdateWithoutUserInput, ThoughtAnalysisUncheckedUpdateWithoutUserInput>
    create: XOR<ThoughtAnalysisCreateWithoutUserInput, ThoughtAnalysisUncheckedCreateWithoutUserInput>
  }

  export type ThoughtAnalysisUpdateWithWhereUniqueWithoutUserInput = {
    where: ThoughtAnalysisWhereUniqueInput
    data: XOR<ThoughtAnalysisUpdateWithoutUserInput, ThoughtAnalysisUncheckedUpdateWithoutUserInput>
  }

  export type ThoughtAnalysisUpdateManyWithWhereWithoutUserInput = {
    where: ThoughtAnalysisScalarWhereInput
    data: XOR<ThoughtAnalysisUpdateManyMutationInput, ThoughtAnalysisUncheckedUpdateManyWithoutUserInput>
  }

  export type ThoughtAnalysisScalarWhereInput = {
    AND?: ThoughtAnalysisScalarWhereInput | ThoughtAnalysisScalarWhereInput[]
    OR?: ThoughtAnalysisScalarWhereInput[]
    NOT?: ThoughtAnalysisScalarWhereInput | ThoughtAnalysisScalarWhereInput[]
    id?: IntFilter<"ThoughtAnalysis"> | number
    userId?: IntFilter<"ThoughtAnalysis"> | number
    analysisType?: StringFilter<"ThoughtAnalysis"> | string
    timeRange?: StringNullableFilter<"ThoughtAnalysis"> | string | null
    analysisResult?: StringFilter<"ThoughtAnalysis"> | string
    createdAt?: DateTimeFilter<"ThoughtAnalysis"> | Date | string
  }

  export type TimelineAnalysisUpsertWithWhereUniqueWithoutUserInput = {
    where: TimelineAnalysisWhereUniqueInput
    update: XOR<TimelineAnalysisUpdateWithoutUserInput, TimelineAnalysisUncheckedUpdateWithoutUserInput>
    create: XOR<TimelineAnalysisCreateWithoutUserInput, TimelineAnalysisUncheckedCreateWithoutUserInput>
  }

  export type TimelineAnalysisUpdateWithWhereUniqueWithoutUserInput = {
    where: TimelineAnalysisWhereUniqueInput
    data: XOR<TimelineAnalysisUpdateWithoutUserInput, TimelineAnalysisUncheckedUpdateWithoutUserInput>
  }

  export type TimelineAnalysisUpdateManyWithWhereWithoutUserInput = {
    where: TimelineAnalysisScalarWhereInput
    data: XOR<TimelineAnalysisUpdateManyMutationInput, TimelineAnalysisUncheckedUpdateManyWithoutUserInput>
  }

  export type TimelineAnalysisScalarWhereInput = {
    AND?: TimelineAnalysisScalarWhereInput | TimelineAnalysisScalarWhereInput[]
    OR?: TimelineAnalysisScalarWhereInput[]
    NOT?: TimelineAnalysisScalarWhereInput | TimelineAnalysisScalarWhereInput[]
    id?: IntFilter<"TimelineAnalysis"> | number
    userId?: IntFilter<"TimelineAnalysis"> | number
    memoryRecordId?: IntFilter<"TimelineAnalysis"> | number
    conversationId?: IntNullableFilter<"TimelineAnalysis"> | number | null
    analysisStage?: StringFilter<"TimelineAnalysis"> | string
    psychologicalInsight?: StringFilter<"TimelineAnalysis"> | string
    emotionalState?: StringNullableFilter<"TimelineAnalysis"> | string | null
    growthIndicators?: StringNullableFilter<"TimelineAnalysis"> | string | null
    createdAt?: DateTimeFilter<"TimelineAnalysis"> | Date | string
  }

  export type UserCreateWithoutMemoryRecordsInput = {
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    conversations?: ConversationCreateNestedManyWithoutUserInput
    thoughtAnalysis?: ThoughtAnalysisCreateNestedManyWithoutUserInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMemoryRecordsInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    conversations?: ConversationUncheckedCreateNestedManyWithoutUserInput
    thoughtAnalysis?: ThoughtAnalysisUncheckedCreateNestedManyWithoutUserInput
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMemoryRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMemoryRecordsInput, UserUncheckedCreateWithoutMemoryRecordsInput>
  }

  export type ConversationCreateWithoutMemoryRecordInput = {
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConversationsInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutMemoryRecordInput = {
    id?: number
    userId: number
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutMemoryRecordInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMemoryRecordInput, ConversationUncheckedCreateWithoutMemoryRecordInput>
  }

  export type ConversationCreateManyMemoryRecordInputEnvelope = {
    data: ConversationCreateManyMemoryRecordInput | ConversationCreateManyMemoryRecordInput[]
  }

  export type TimelineAnalysisCreateWithoutMemoryRecordInput = {
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTimelineAnalysisInput
    conversation?: ConversationCreateNestedOneWithoutTimelineAnalysisInput
  }

  export type TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput = {
    id?: number
    userId: number
    conversationId?: number | null
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
  }

  export type TimelineAnalysisCreateOrConnectWithoutMemoryRecordInput = {
    where: TimelineAnalysisWhereUniqueInput
    create: XOR<TimelineAnalysisCreateWithoutMemoryRecordInput, TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput>
  }

  export type TimelineAnalysisCreateManyMemoryRecordInputEnvelope = {
    data: TimelineAnalysisCreateManyMemoryRecordInput | TimelineAnalysisCreateManyMemoryRecordInput[]
  }

  export type UserUpsertWithoutMemoryRecordsInput = {
    update: XOR<UserUpdateWithoutMemoryRecordsInput, UserUncheckedUpdateWithoutMemoryRecordsInput>
    create: XOR<UserCreateWithoutMemoryRecordsInput, UserUncheckedCreateWithoutMemoryRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMemoryRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMemoryRecordsInput, UserUncheckedUpdateWithoutMemoryRecordsInput>
  }

  export type UserUpdateWithoutMemoryRecordsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUpdateManyWithoutUserNestedInput
    thoughtAnalysis?: ThoughtAnalysisUpdateManyWithoutUserNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMemoryRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUncheckedUpdateManyWithoutUserNestedInput
    thoughtAnalysis?: ThoughtAnalysisUncheckedUpdateManyWithoutUserNestedInput
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConversationUpsertWithWhereUniqueWithoutMemoryRecordInput = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutMemoryRecordInput, ConversationUncheckedUpdateWithoutMemoryRecordInput>
    create: XOR<ConversationCreateWithoutMemoryRecordInput, ConversationUncheckedCreateWithoutMemoryRecordInput>
  }

  export type ConversationUpdateWithWhereUniqueWithoutMemoryRecordInput = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutMemoryRecordInput, ConversationUncheckedUpdateWithoutMemoryRecordInput>
  }

  export type ConversationUpdateManyWithWhereWithoutMemoryRecordInput = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutMemoryRecordInput>
  }

  export type TimelineAnalysisUpsertWithWhereUniqueWithoutMemoryRecordInput = {
    where: TimelineAnalysisWhereUniqueInput
    update: XOR<TimelineAnalysisUpdateWithoutMemoryRecordInput, TimelineAnalysisUncheckedUpdateWithoutMemoryRecordInput>
    create: XOR<TimelineAnalysisCreateWithoutMemoryRecordInput, TimelineAnalysisUncheckedCreateWithoutMemoryRecordInput>
  }

  export type TimelineAnalysisUpdateWithWhereUniqueWithoutMemoryRecordInput = {
    where: TimelineAnalysisWhereUniqueInput
    data: XOR<TimelineAnalysisUpdateWithoutMemoryRecordInput, TimelineAnalysisUncheckedUpdateWithoutMemoryRecordInput>
  }

  export type TimelineAnalysisUpdateManyWithWhereWithoutMemoryRecordInput = {
    where: TimelineAnalysisScalarWhereInput
    data: XOR<TimelineAnalysisUpdateManyMutationInput, TimelineAnalysisUncheckedUpdateManyWithoutMemoryRecordInput>
  }

  export type UserCreateWithoutConversationsInput = {
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memoryRecords?: MemoryRecordCreateNestedManyWithoutUserInput
    thoughtAnalysis?: ThoughtAnalysisCreateNestedManyWithoutUserInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConversationsInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memoryRecords?: MemoryRecordUncheckedCreateNestedManyWithoutUserInput
    thoughtAnalysis?: ThoughtAnalysisUncheckedCreateNestedManyWithoutUserInput
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConversationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
  }

  export type MemoryRecordCreateWithoutConversationsInput = {
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMemoryRecordsInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutMemoryRecordInput
  }

  export type MemoryRecordUncheckedCreateWithoutConversationsInput = {
    id?: number
    userId: number
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutMemoryRecordInput
  }

  export type MemoryRecordCreateOrConnectWithoutConversationsInput = {
    where: MemoryRecordWhereUniqueInput
    create: XOR<MemoryRecordCreateWithoutConversationsInput, MemoryRecordUncheckedCreateWithoutConversationsInput>
  }

  export type TimelineAnalysisCreateWithoutConversationInput = {
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTimelineAnalysisInput
    memoryRecord: MemoryRecordCreateNestedOneWithoutTimelineAnalysisInput
  }

  export type TimelineAnalysisUncheckedCreateWithoutConversationInput = {
    id?: number
    userId: number
    memoryRecordId: number
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
  }

  export type TimelineAnalysisCreateOrConnectWithoutConversationInput = {
    where: TimelineAnalysisWhereUniqueInput
    create: XOR<TimelineAnalysisCreateWithoutConversationInput, TimelineAnalysisUncheckedCreateWithoutConversationInput>
  }

  export type TimelineAnalysisCreateManyConversationInputEnvelope = {
    data: TimelineAnalysisCreateManyConversationInput | TimelineAnalysisCreateManyConversationInput[]
  }

  export type UserUpsertWithoutConversationsInput = {
    update: XOR<UserUpdateWithoutConversationsInput, UserUncheckedUpdateWithoutConversationsInput>
    create: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConversationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConversationsInput, UserUncheckedUpdateWithoutConversationsInput>
  }

  export type UserUpdateWithoutConversationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecords?: MemoryRecordUpdateManyWithoutUserNestedInput
    thoughtAnalysis?: ThoughtAnalysisUpdateManyWithoutUserNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConversationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecords?: MemoryRecordUncheckedUpdateManyWithoutUserNestedInput
    thoughtAnalysis?: ThoughtAnalysisUncheckedUpdateManyWithoutUserNestedInput
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MemoryRecordUpsertWithoutConversationsInput = {
    update: XOR<MemoryRecordUpdateWithoutConversationsInput, MemoryRecordUncheckedUpdateWithoutConversationsInput>
    create: XOR<MemoryRecordCreateWithoutConversationsInput, MemoryRecordUncheckedCreateWithoutConversationsInput>
    where?: MemoryRecordWhereInput
  }

  export type MemoryRecordUpdateToOneWithWhereWithoutConversationsInput = {
    where?: MemoryRecordWhereInput
    data: XOR<MemoryRecordUpdateWithoutConversationsInput, MemoryRecordUncheckedUpdateWithoutConversationsInput>
  }

  export type MemoryRecordUpdateWithoutConversationsInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemoryRecordsNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutMemoryRecordNestedInput
  }

  export type MemoryRecordUncheckedUpdateWithoutConversationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutMemoryRecordNestedInput
  }

  export type TimelineAnalysisUpsertWithWhereUniqueWithoutConversationInput = {
    where: TimelineAnalysisWhereUniqueInput
    update: XOR<TimelineAnalysisUpdateWithoutConversationInput, TimelineAnalysisUncheckedUpdateWithoutConversationInput>
    create: XOR<TimelineAnalysisCreateWithoutConversationInput, TimelineAnalysisUncheckedCreateWithoutConversationInput>
  }

  export type TimelineAnalysisUpdateWithWhereUniqueWithoutConversationInput = {
    where: TimelineAnalysisWhereUniqueInput
    data: XOR<TimelineAnalysisUpdateWithoutConversationInput, TimelineAnalysisUncheckedUpdateWithoutConversationInput>
  }

  export type TimelineAnalysisUpdateManyWithWhereWithoutConversationInput = {
    where: TimelineAnalysisScalarWhereInput
    data: XOR<TimelineAnalysisUpdateManyMutationInput, TimelineAnalysisUncheckedUpdateManyWithoutConversationInput>
  }

  export type UserCreateWithoutThoughtAnalysisInput = {
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memoryRecords?: MemoryRecordCreateNestedManyWithoutUserInput
    conversations?: ConversationCreateNestedManyWithoutUserInput
    timelineAnalysis?: TimelineAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutThoughtAnalysisInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memoryRecords?: MemoryRecordUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutUserInput
    timelineAnalysis?: TimelineAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutThoughtAnalysisInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutThoughtAnalysisInput, UserUncheckedCreateWithoutThoughtAnalysisInput>
  }

  export type UserUpsertWithoutThoughtAnalysisInput = {
    update: XOR<UserUpdateWithoutThoughtAnalysisInput, UserUncheckedUpdateWithoutThoughtAnalysisInput>
    create: XOR<UserCreateWithoutThoughtAnalysisInput, UserUncheckedCreateWithoutThoughtAnalysisInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutThoughtAnalysisInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutThoughtAnalysisInput, UserUncheckedUpdateWithoutThoughtAnalysisInput>
  }

  export type UserUpdateWithoutThoughtAnalysisInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecords?: MemoryRecordUpdateManyWithoutUserNestedInput
    conversations?: ConversationUpdateManyWithoutUserNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutThoughtAnalysisInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecords?: MemoryRecordUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutUserNestedInput
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTimelineAnalysisInput = {
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memoryRecords?: MemoryRecordCreateNestedManyWithoutUserInput
    conversations?: ConversationCreateNestedManyWithoutUserInput
    thoughtAnalysis?: ThoughtAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTimelineAnalysisInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memoryRecords?: MemoryRecordUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutUserInput
    thoughtAnalysis?: ThoughtAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTimelineAnalysisInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTimelineAnalysisInput, UserUncheckedCreateWithoutTimelineAnalysisInput>
  }

  export type MemoryRecordCreateWithoutTimelineAnalysisInput = {
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMemoryRecordsInput
    conversations?: ConversationCreateNestedManyWithoutMemoryRecordInput
  }

  export type MemoryRecordUncheckedCreateWithoutTimelineAnalysisInput = {
    id?: number
    userId: number
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    conversations?: ConversationUncheckedCreateNestedManyWithoutMemoryRecordInput
  }

  export type MemoryRecordCreateOrConnectWithoutTimelineAnalysisInput = {
    where: MemoryRecordWhereUniqueInput
    create: XOR<MemoryRecordCreateWithoutTimelineAnalysisInput, MemoryRecordUncheckedCreateWithoutTimelineAnalysisInput>
  }

  export type ConversationCreateWithoutTimelineAnalysisInput = {
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConversationsInput
    memoryRecord: MemoryRecordCreateNestedOneWithoutConversationsInput
  }

  export type ConversationUncheckedCreateWithoutTimelineAnalysisInput = {
    id?: number
    userId: number
    memoryRecordId: number
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationCreateOrConnectWithoutTimelineAnalysisInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutTimelineAnalysisInput, ConversationUncheckedCreateWithoutTimelineAnalysisInput>
  }

  export type UserUpsertWithoutTimelineAnalysisInput = {
    update: XOR<UserUpdateWithoutTimelineAnalysisInput, UserUncheckedUpdateWithoutTimelineAnalysisInput>
    create: XOR<UserCreateWithoutTimelineAnalysisInput, UserUncheckedCreateWithoutTimelineAnalysisInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTimelineAnalysisInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTimelineAnalysisInput, UserUncheckedUpdateWithoutTimelineAnalysisInput>
  }

  export type UserUpdateWithoutTimelineAnalysisInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecords?: MemoryRecordUpdateManyWithoutUserNestedInput
    conversations?: ConversationUpdateManyWithoutUserNestedInput
    thoughtAnalysis?: ThoughtAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTimelineAnalysisInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecords?: MemoryRecordUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutUserNestedInput
    thoughtAnalysis?: ThoughtAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MemoryRecordUpsertWithoutTimelineAnalysisInput = {
    update: XOR<MemoryRecordUpdateWithoutTimelineAnalysisInput, MemoryRecordUncheckedUpdateWithoutTimelineAnalysisInput>
    create: XOR<MemoryRecordCreateWithoutTimelineAnalysisInput, MemoryRecordUncheckedCreateWithoutTimelineAnalysisInput>
    where?: MemoryRecordWhereInput
  }

  export type MemoryRecordUpdateToOneWithWhereWithoutTimelineAnalysisInput = {
    where?: MemoryRecordWhereInput
    data: XOR<MemoryRecordUpdateWithoutTimelineAnalysisInput, MemoryRecordUncheckedUpdateWithoutTimelineAnalysisInput>
  }

  export type MemoryRecordUpdateWithoutTimelineAnalysisInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemoryRecordsNestedInput
    conversations?: ConversationUpdateManyWithoutMemoryRecordNestedInput
  }

  export type MemoryRecordUncheckedUpdateWithoutTimelineAnalysisInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUncheckedUpdateManyWithoutMemoryRecordNestedInput
  }

  export type ConversationUpsertWithoutTimelineAnalysisInput = {
    update: XOR<ConversationUpdateWithoutTimelineAnalysisInput, ConversationUncheckedUpdateWithoutTimelineAnalysisInput>
    create: XOR<ConversationCreateWithoutTimelineAnalysisInput, ConversationUncheckedCreateWithoutTimelineAnalysisInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutTimelineAnalysisInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutTimelineAnalysisInput, ConversationUncheckedUpdateWithoutTimelineAnalysisInput>
  }

  export type ConversationUpdateWithoutTimelineAnalysisInput = {
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConversationsNestedInput
    memoryRecord?: MemoryRecordUpdateOneRequiredWithoutConversationsNestedInput
  }

  export type ConversationUncheckedUpdateWithoutTimelineAnalysisInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemoryRecordCreateManyUserInput = {
    id?: number
    title?: string | null
    content: string
    mood?: number | null
    tags?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
  }

  export type ConversationCreateManyUserInput = {
    id?: number
    memoryRecordId: number
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThoughtAnalysisCreateManyUserInput = {
    id?: number
    analysisType: string
    timeRange?: string | null
    analysisResult: string
    createdAt?: Date | string
  }

  export type TimelineAnalysisCreateManyUserInput = {
    id?: number
    memoryRecordId: number
    conversationId?: number | null
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
  }

  export type MemoryRecordUpdateWithoutUserInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUpdateManyWithoutMemoryRecordNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutMemoryRecordNestedInput
  }

  export type MemoryRecordUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUncheckedUpdateManyWithoutMemoryRecordNestedInput
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutMemoryRecordNestedInput
  }

  export type MemoryRecordUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    mood?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUpdateWithoutUserInput = {
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecord?: MemoryRecordUpdateOneRequiredWithoutConversationsNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThoughtAnalysisUpdateWithoutUserInput = {
    analysisType?: StringFieldUpdateOperationsInput | string
    timeRange?: NullableStringFieldUpdateOperationsInput | string | null
    analysisResult?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThoughtAnalysisUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    analysisType?: StringFieldUpdateOperationsInput | string
    timeRange?: NullableStringFieldUpdateOperationsInput | string | null
    analysisResult?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThoughtAnalysisUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    analysisType?: StringFieldUpdateOperationsInput | string
    timeRange?: NullableStringFieldUpdateOperationsInput | string | null
    analysisResult?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineAnalysisUpdateWithoutUserInput = {
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memoryRecord?: MemoryRecordUpdateOneRequiredWithoutTimelineAnalysisNestedInput
    conversation?: ConversationUpdateOneWithoutTimelineAnalysisNestedInput
  }

  export type TimelineAnalysisUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineAnalysisUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationCreateManyMemoryRecordInput = {
    id?: number
    userId: number
    conversationData: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TimelineAnalysisCreateManyMemoryRecordInput = {
    id?: number
    userId: number
    conversationId?: number | null
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
  }

  export type ConversationUpdateWithoutMemoryRecordInput = {
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConversationsNestedInput
    timelineAnalysis?: TimelineAnalysisUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutMemoryRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timelineAnalysis?: TimelineAnalysisUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutMemoryRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    conversationData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineAnalysisUpdateWithoutMemoryRecordInput = {
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimelineAnalysisNestedInput
    conversation?: ConversationUpdateOneWithoutTimelineAnalysisNestedInput
  }

  export type TimelineAnalysisUncheckedUpdateWithoutMemoryRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineAnalysisUncheckedUpdateManyWithoutMemoryRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineAnalysisCreateManyConversationInput = {
    id?: number
    userId: number
    memoryRecordId: number
    analysisStage: string
    psychologicalInsight: string
    emotionalState?: string | null
    growthIndicators?: string | null
    createdAt?: Date | string
  }

  export type TimelineAnalysisUpdateWithoutConversationInput = {
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimelineAnalysisNestedInput
    memoryRecord?: MemoryRecordUpdateOneRequiredWithoutTimelineAnalysisNestedInput
  }

  export type TimelineAnalysisUncheckedUpdateWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineAnalysisUncheckedUpdateManyWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    memoryRecordId?: IntFieldUpdateOperationsInput | number
    analysisStage?: StringFieldUpdateOperationsInput | string
    psychologicalInsight?: StringFieldUpdateOperationsInput | string
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    growthIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemoryRecordCountOutputTypeDefaultArgs instead
     */
    export type MemoryRecordCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemoryRecordCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationCountOutputTypeDefaultArgs instead
     */
    export type ConversationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemoryRecordDefaultArgs instead
     */
    export type MemoryRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemoryRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationDefaultArgs instead
     */
    export type ConversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThoughtAnalysisDefaultArgs instead
     */
    export type ThoughtAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThoughtAnalysisDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TimelineAnalysisDefaultArgs instead
     */
    export type TimelineAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TimelineAnalysisDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}